{"version":3,"sources":["appointment-tests.js"],"names":["test","require","sinon","proxyquire","Sequelize","Op","userFixtures","appointmentFixtures","config","logging","userid","appointmentid","ccid","UserStub","AppointmentStub","db","sandbox","customer","Object","assign","user","doctor","docuser","oneapp","vArgs","id","userId","ccidArgs","where","newAppointment","day","hourinit","hourend","doctorname","type","branch","state","assignedid","assignedname","createdAt","Date","updatedAt","dayinit","dayend","daysArgs","lt","gt","beforeEach","createSandbox","hasMany","spy","belongsTo","create","stub","withArgs","returns","Promise","resolve","toJSON","findOne","byrel","byCCid","findAll","bydays","setupDatabase","afterEach","restore","t","truthy","Appointment","User","serial","true","called","calledWith","appointment","createOrUpdate","calledOnce","deepEqual","appointments","findNoAssignedByDate","is","length"],"mappings":"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","file":"appointment-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\nconst Sequelize = require('sequelize')\nconst Op = Sequelize.Op\n\nconst userFixtures = require('./fixtures/user')\nconst appointmentFixtures = require('./fixtures/appointment')\n\nlet config = {\n  logging() {}\n}\n\nlet userid = 2\nlet appointmentid = 5\nlet ccid = 11\nlet UserStub = null\nlet AppointmentStub = null\nlet db = null\nlet sandbox = null\n\nlet customer = Object.assign({}, appointmentFixtures.user)\nlet doctor = Object.assign({}, appointmentFixtures.docuser)\nlet oneapp = Object.assign({}, appointmentFixtures.oneapp)\n\nlet vArgs = {\n  id:appointmentid,\n  userId:userid\n}\nlet ccidArgs = {\n  where: { ccid }\n}\n\nlet newAppointment = {\n  id:appointmentid,\n  userId:userid,\n  day: '2018-06-28',\n  hourinit: '8:00',\n  hourend:  '9:00',\n  doctorname: 'Pepito PÃ©rez',\n  type: 'General',\n  branch:1,\n  state:1,\n  assignedid:0,\n  assignedname:'',\n  createdAt: new Date(),\n  updatedAt: new Date()\n  // operatorsAliases: false\n}\nlet dayinit = '2018-06-20'\nlet dayend = '2018-06-24'\n\n// UserStub = {\n//  hasMany: sinon.spy()\n// }\nlet daysArgs = {\n  where: {\n    day:{\n      [Op.lt]: dayinit,\n      [Op.gt]: dayend\n    },\n    state:1\n  }\n}\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n\n  UserStub = {\n    hasMany: sandbox.spy()\n  }\n\n  AppointmentStub = {\n    belongsTo: sandbox.spy()\n  }\n\n  // Model create and update Stub\n  AppointmentStub.create = sandbox.stub()\n  AppointmentStub.create.withArgs(newAppointment).returns(Promise.resolve({\n    toJSON() { return newAppointment }\n  }))\n\n  // Model findOne Stub (with ccid)\n  AppointmentStub.findOne = sandbox.stub()\n  AppointmentStub.findOne.withArgs(vArgs).returns(Promise.resolve(appointmentFixtures.byrel(appointmentid, userid)))\n\n  // Model findOne Stub (with ccid)\n  UserStub.findOne = sandbox.stub()\n  UserStub.findOne.withArgs(ccidArgs).returns(Promise.resolve(userFixtures.byCCid(ccid)))\n\n  AppointmentStub.findAll = sandbox.stub()\n  AppointmentStub.findAll.withArgs(daysArgs).returns(Promise.resolve(appointmentFixtures.bydays(dayinit,dayend)))\n\n  // Model findById Stub\n  // UserStub.findById = sandbox.stub()\n  // UserStub.findById.withArgs(id).returns(Promise.resolve(userFixtures.byId(id))) */\n\n  const setupDatabase = proxyquire('../', {\n    './models/user': () => UserStub,\n    './models/appointment': () => AppointmentStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('Appointment', t => {\n  t.truthy(db.Appointment, 'User service should exist')\n})\n\ntest('User', t => {\n  t.truthy(db.User, 'User service should exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(UserStub.hasMany.called, 'UserModel.hasMany was executed')\n  t.true(UserStub.hasMany.calledWith(AppointmentStub), 'Argument should be the ScheduleUserModel')\n  t.true(AppointmentStub.belongsTo.called, 'SheduleUserModel.belongsTo was executed')\n  t.true(AppointmentStub.belongsTo.calledWith(UserStub), 'Argument should be the UserModel')\n})\n\ntest.serial('Appointmet#createOrUpdate - new - user - doctor', async t => {\n  let appointment = await db.Appointment.createOrUpdate(ccid, newAppointment)\n\n  // Primero buscamos el usuario\n  t.true(UserStub.findOne.called, 'findOne should be called on model')\n  t.true(UserStub.findOne.calledOnce, 'findOne should be called twice')\n  t.true(UserStub.findOne.calledWith(ccidArgs), 'findOne should be called with ccid args')\n\n  // Luego buscamos la cita\n  t.true(AppointmentStub.findOne.called, 'findOne should be called on model')\n  t.true(AppointmentStub.findOne.calledOnce, 'findOne should be called twice')\n  t.true(AppointmentStub.findOne.calledWith(vArgs), 'findOne should be called with ccid args')\n\n  // Luego creamos la cita\n  t.true(AppointmentStub.create.called, 'agent.update called on model')\n  t.true(AppointmentStub.create.calledOnce, 'agent.update should be called once')\n  t.true(AppointmentStub.create.calledWith(newAppointment), 'agent.update should be called with specified args')\n  t.deepEqual(appointment, newAppointment, 'agent should be the same')\n})\n\ntest.serial('Appointmet#findNoAssignedByDate', async t => {\n  let appointments = await db.Appointment.findNoAssignedByDate(dayinit, dayend)\n\n  // Buscamos con un alll\n  t.true(AppointmentStub.findAll.called, 'findOne should be called on model')\n  t.true(AppointmentStub.findAll.calledOnce, 'findOne should be called twice')\n  t.true(AppointmentStub.findAll.calledWith(daysArgs), 'findOne should be called with ccid args')\n\n  t.is(appointments.length, appointmentFixtures.bydays(dayinit,dayend).length, 'agents should be the same amount')\n  t.deepEqual(appointments, appointmentFixtures.bydays(dayinit,dayend), 'agents should be the same')\n})\n\n/* test.serial('User#createOrUpdate - exists', async t => {\n  let user = await db.User.createOrUpdate(single)\n\n  t.true(UserStub.findOne.called, 'findOne should be called on model')\n  t.true(UserStub.findOne.calledTwice, 'findOne should be called twice')\n  // 2 Para el ccid\n  t.true(UserStub.findOne.calledWith(ccidArgs), 'findOne should be called with ccid args')\n\n  t.true(UserStub.update.called, 'agent.update called on model')\n  t.true(UserStub.update.calledOnce, 'agent.update should be called once')\n  t.true(UserStub.update.calledWith(single), 'agent.update should be called with specified args')\n  t.deepEqual(user, single, 'agent should be the same')\n}) */\n\n"]}