{"version":3,"sources":["appointment-tests.js"],"names":["test","require","sinon","proxyquire","Sequelize","Op","appointmentFixtures","config","logging","appointmentid","UserStub","AppointmentStub","db","sandbox","customer","Object","assign","user","doctor","docuser","userid","id","ccid","oneAppoint","vArgs","where","userId","ccidArgs","newAppointment","day","hourinit","hourend","doctorname","type","branch","state","assignedid","assignedname","createdAt","Date","updatedAt","dayinit","dayend","daysArgs","lt","gt","beforeEach","createSandbox","hasMany","spy","belongsTo","create","stub","withArgs","returns","Promise","resolve","toJSON","update","findOne","byrel","byCCid","findAll","bydays","setupDatabase","afterEach","restore","t","truthy","Appointment","User","serial","true","called","calledWith","appointment","createOrUpdate","calledOnce","deepEqual"],"mappings":"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","file":"appointment-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\nconst Sequelize = require('sequelize')\nconst Op = Sequelize.Op\n\nconst appointmentFixtures = require('./fixtures/appointment')\n\nlet config = {\n  logging() {}\n}\n\nlet appointmentid = 1\n\nlet UserStub = null\nlet AppointmentStub = null\nlet db = null\nlet sandbox = null\n\nlet customer = Object.assign({}, appointmentFixtures.user)\nlet doctor = Object.assign({}, appointmentFixtures.docuser)\n\nlet userid = doctor.id\nlet ccid = doctor.ccid\n\nlet oneAppoint = Object.assign({}, appointmentFixtures.oneAppoint)\n\nlet vArgs = {\n  where:{\n    id:appointmentid,\n    userId:userid\n  }\n}\nlet ccidArgs = {\n  where: { ccid }\n}\n\nlet newAppointment = {\n  id:5,\n  userId:2,\n  day: '2018-06-28',\n  hourinit: '8:00',\n  hourend:  '9:00',\n  doctorname: 'Pepito PÃ©rez',\n  type: 'General',\n  branch:1,\n  state:1,\n  assignedid:0,\n  assignedname:'',\n  createdAt: new Date(),\n  updatedAt: new Date()\n  // operatorsAliases: false\n}\nlet dayinit = '2018-06-20'\nlet dayend = '2018-06-24'\n\n// UserStub = {\n//  hasMany: sinon.spy()\n// }\nlet daysArgs = {\n  where: {\n    day:{\n      [Op.lt]: dayinit,\n      [Op.gt]: dayend\n    },\n    state:1\n  }\n}\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n\n  UserStub = {\n    hasMany: sandbox.spy()\n  }\n\n  AppointmentStub = {\n    belongsTo: sandbox.spy()\n  }\n\n  // Model create and update Stub\n  AppointmentStub.create = sandbox.stub()\n  AppointmentStub.create.withArgs(newAppointment).returns(Promise.resolve({\n    toJSON() { return newAppointment }\n  }))\n\n  AppointmentStub.update = sandbox.stub()\n  AppointmentStub.update.withArgs(oneAppoint, ccidArgs).returns(Promise.resolve(oneAppoint))\n\n  // Model findOne Stub (with ccid)\n  AppointmentStub.findOne = sandbox.stub()\n  AppointmentStub.findOne.withArgs(vArgs).returns(Promise.resolve(appointmentFixtures.byrel(appointmentid, userid)))\n\n  // Model findOne Stub (with ccid)\n  UserStub.findOne = sandbox.stub()\n  UserStub.findOne.withArgs(ccidArgs).returns(Promise.resolve(appointmentFixtures.byCCid(ccid)))\n\n  AppointmentStub.findAll = sandbox.stub()\n  AppointmentStub.findAll.withArgs(daysArgs).returns(Promise.resolve(appointmentFixtures.bydays(dayinit, dayend)))\n\n  // Model findById Stub\n  // UserStub.findById = sandbox.stub()\n  // UserStub.findById.withArgs(id).returns(Promise.resolve(userFixtures.byId(id))) */\n\n  const setupDatabase = proxyquire('../', {\n    './models/user': () => UserStub,\n    './models/appointment': () => AppointmentStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('Appointment', t => {\n  t.truthy(db.Appointment, 'Appointment service should exist')\n})\n\ntest('User', t => {\n  t.truthy(db.User, 'User service should exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(UserStub.hasMany.called, 'UserModel.hasMany was executed')\n  t.true(UserStub.hasMany.calledWith(AppointmentStub), 'Argument should be the AppointmentModel')\n  t.true(AppointmentStub.belongsTo.called, 'AppointmentModel.belongsTo was executed')\n  t.true(AppointmentStub.belongsTo.calledWith(UserStub), 'Argument should be the UserModel')\n})\n\ntest.serial('Appointmet#createOrUpdate - new - user - doctor', async t => {\n  let appointment = await db.Appointment.createOrUpdate(ccid, newAppointment)\n\n  // Primero buscamos el usuario\n  t.true(UserStub.findOne.called, 'findOne (user) should be called on model')\n  t.true(UserStub.findOne.calledOnce, 'findOne (user) should be called twice')\n  t.true(UserStub.findOne.calledWith(ccidArgs), 'findOne (user) should be called with ccid args')\n\n  // Luego buscamos la cita\n  t.true(AppointmentStub.findOne.called, 'findOne (appoint) should be called on model')\n  t.true(AppointmentStub.findOne.calledOnce, 'findOne (appoint) should be called twice')\n  t.true(AppointmentStub.findOne.calledWith({\n    where:{\n      id:newAppointment.id,\n      userId:newAppointment.userId\n    }\n  }), 'findOne (appoint) should be called with vargs')\n\n  // Luego creamos la cita\n  t.true(AppointmentStub.create.called, 'appointment.create called on model')\n  t.true(AppointmentStub.create.calledOnce, 'appointment.create should be called once')\n  t.true(AppointmentStub.create.calledWith(newAppointment), 'appointment.create should be called with specified args')\n  t.deepEqual(appointment, newAppointment, 'appointment should be the same')\n})\n\ntest.serial('Appointmet#createOrUpdate - exist - user - doctor', async t => {\n  let appointment = await db.Appointment.createOrUpdate(ccid, oneAppoint)\n\n  // Primero buscamos el usuario\n  t.true(UserStub.findOne.called, 'findOne (user) should be called on model')\n  t.true(UserStub.findOne.calledOnce, 'findOne (user) should be called twice')\n  t.true(UserStub.findOne.calledWith(ccidArgs), 'findOne (user) should be called with ccid args')\n\n  // Luego buscamos la cita\n  t.true(AppointmentStub.findOne.called, 'findOne (appoint) should be called on model')\n  t.true(AppointmentStub.findOne.calledOnce, 'findOne (appoint) should be called twice')\n  t.true(AppointmentStub.findOne.calledWith(vArgs), 'findOne (appoint) should be called with vargs')\n\n  // Luego creamos la cita\n  t.true(AppointmentStub.create.called, 'appointment.create called on model')\n  t.true(AppointmentStub.create.calledOnce, 'appointment.create should be called once')\n  t.true(AppointmentStub.create.calledWith(oneAppoint), 'appointment.create should be called with specified args')\n  t.deepEqual(appointment, oneAppoint, 'appointment should be the same')\n})\n\n/* test.serial('Appointment#findNoAssignedByDate', async t => {\n  let appointments = await db.Appointment.findNoAssignedByDate(dayinit, dayend)\n\n  // Buscamos con un alll\n  t.true(AppointmentStub.findAll.called, 'findOne should be called on model')\n  t.true(AppointmentStub.findAll.calledOnce, 'findOne should be called twice')\n  t.true(AppointmentStub.findAll.calledWith(daysArgs), 'findOne should be called with ccid args')\n\n  t.is(appointments.length, appointmentFixtures.bydays(dayinit,dayend).length, 'agents should be the same amount')\n  t.deepEqual(appointments, appointmentFixtures.bydays(dayinit,dayend), 'agents should be the same')\n}) */\n\n/* test.serial('User#createOrUpdate - exists', async t => {\n  let user = await db.User.createOrUpdate(single)\n\n  t.true(UserStub.findOne.called, 'findOne should be called on model')\n  t.true(UserStub.findOne.calledTwice, 'findOne should be called twice')\n  // 2 Para el ccid\n  t.true(UserStub.findOne.calledWith(ccidArgs), 'findOne should be called with ccid args')\n\n  t.true(UserStub.update.called, 'agent.update called on model')\n  t.true(UserStub.update.calledOnce, 'agent.update should be called once')\n  t.true(UserStub.update.calledWith(single), 'agent.update should be called with specified args')\n  t.deepEqual(user, single, 'agent should be the same')\n}) */\n\n"]}