'use strict';var cov_e1mmhbbz3=function(){var path="/home/shersnape/Ceiba/Java-Script/Tutorial/JavaScritp-Platzi/smallJS/smallJS-dbsql/lib/appointment.js",hash="d7c21c306a1150078499415d2b04820eac8cf424",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/home/shersnape/Ceiba/Java-Script/Tutorial/JavaScritp-Platzi/smallJS/smallJS-dbsql/lib/appointment.js",statementMap:{"0":{start:{line:3,column:18},end:{line:3,column:38}},"1":{start:{line:4,column:11},end:{line:4,column:23}},"2":{start:{line:5,column:0},end:{line:208,column:3}},"3":{start:{line:9,column:19},end:{line:11,column:8}},"4":{start:{line:12,column:48},end:{line:17,column:8}},"5":{start:{line:18,column:36},end:{line:19,column:64}},"6":{start:{line:28,column:6},end:{line:32,column:7}},"7":{start:{line:29,column:8},end:{line:29,column:55}},"8":{start:{line:30,column:23},end:{line:30,column:65}},"9":{start:{line:31,column:8},end:{line:31,column:30}},"10":{start:{line:38,column:6},end:{line:46,column:8}},"11":{start:{line:51,column:18},end:{line:59,column:7}},"12":{start:{line:61,column:6},end:{line:78,column:7}},"13":{start:{line:63,column:10},end:{line:63,column:29}},"14":{start:{line:64,column:10},end:{line:64,column:34}},"15":{start:{line:65,column:10},end:{line:65,column:15}},"16":{start:{line:67,column:10},end:{line:67,column:35}},"17":{start:{line:68,column:10},end:{line:68,column:40}},"18":{start:{line:69,column:10},end:{line:69,column:15}},"19":{start:{line:71,column:10},end:{line:71,column:31}},"20":{start:{line:72,column:10},end:{line:72,column:36}},"21":{start:{line:73,column:10},end:{line:73,column:15}},"22":{start:{line:75,column:10},end:{line:75,column:32}},"23":{start:{line:76,column:10},end:{line:76,column:22}},"24":{start:{line:77,column:10},end:{line:77,column:15}},"25":{start:{line:79,column:6},end:{line:79,column:44}},"26":{start:{line:84,column:18},end:{line:91,column:7}},"27":{start:{line:92,column:6},end:{line:110,column:7}},"28":{start:{line:94,column:10},end:{line:94,column:29}},"29":{start:{line:95,column:10},end:{line:95,column:34}},"30":{start:{line:96,column:10},end:{line:96,column:15}},"31":{start:{line:99,column:10},end:{line:99,column:35}},"32":{start:{line:100,column:10},end:{line:100,column:40}},"33":{start:{line:101,column:10},end:{line:101,column:15}},"34":{start:{line:103,column:10},end:{line:103,column:31}},"35":{start:{line:104,column:10},end:{line:104,column:36}},"36":{start:{line:105,column:10},end:{line:105,column:15}},"37":{start:{line:107,column:10},end:{line:107,column:32}},"38":{start:{line:108,column:10},end:{line:108,column:22}},"39":{start:{line:109,column:10},end:{line:109,column:15}},"40":{start:{line:111,column:6},end:{line:111,column:44}},"41":{start:{line:115,column:23},end:{line:120,column:7}},"42":{start:{line:122,column:21},end:{line:122,column:54}},"43":{start:{line:124,column:36},end:{line:124,column:83}},"44":{start:{line:127,column:6},end:{line:130,column:7}},"45":{start:{line:128,column:24},end:{line:128,column:120}},"46":{start:{line:129,column:8},end:{line:129,column:88}},"47":{start:{line:135,column:23},end:{line:145,column:7}},"48":{start:{line:147,column:21},end:{line:147,column:54}},"49":{start:{line:149,column:36},end:{line:149,column:83}},"50":{start:{line:152,column:6},end:{line:159,column:7}},"51":{start:{line:153,column:8},end:{line:158,column:9}},"52":{start:{line:154,column:26},end:{line:156,column:12}},"53":{start:{line:157,column:10},end:{line:157,column:89}},"54":{start:{line:167,column:6},end:{line:167,column:42}},"55":{start:{line:172,column:19},end:{line:174,column:8}},"56":{start:{line:175,column:6},end:{line:179,column:8}},"57":{start:{line:183,column:19},end:{line:185,column:8}},"58":{start:{line:186,column:6},end:{line:194,column:8}},"59":{start:{line:197,column:4},end:{line:207,column:5}}},fnMap:{"0":{name:"setupAppointment",decl:{start:{line:5,column:26},end:{line:5,column:42}},loc:{start:{line:5,column:72},end:{line:208,column:3}},line:5},"1":{name:"createOrUpdate",decl:{start:{line:8,column:19},end:{line:8,column:33}},loc:{start:{line:8,column:53},end:{line:33,column:5}},line:8},"2":{name:"findNoAssignedByDate",decl:{start:{line:37,column:19},end:{line:37,column:39}},loc:{start:{line:37,column:57},end:{line:47,column:5}},line:37},"3":{name:"findNoAssignedByGroup",decl:{start:{line:50,column:19},end:{line:50,column:40}},loc:{start:{line:50,column:75},end:{line:80,column:5}},line:50},"4":{name:"findByDayGroup",decl:{start:{line:83,column:19},end:{line:83,column:33}},loc:{start:{line:83,column:68},end:{line:112,column:5}},line:83},"5":{name:"assignedAndUpdate",decl:{start:{line:114,column:19},end:{line:114,column:36}},loc:{start:{line:114,column:56},end:{line:132,column:5}},line:114},"6":{name:"canceledAndUpdate",decl:{start:{line:134,column:19},end:{line:134,column:36}},loc:{start:{line:134,column:56},end:{line:161,column:5}},line:134},"7":{name:"findById",decl:{start:{line:166,column:13},end:{line:166,column:21}},loc:{start:{line:166,column:26},end:{line:168,column:5}},line:166},"8":{name:"findByCCid",decl:{start:{line:171,column:19},end:{line:171,column:29}},loc:{start:{line:171,column:36},end:{line:180,column:5}},line:171},"9":{name:"findByCCidDate",decl:{start:{line:182,column:19},end:{line:182,column:33}},loc:{start:{line:182,column:57},end:{line:195,column:5}},line:182}},branchMap:{"0":{loc:{start:{line:18,column:36},end:{line:19,column:64}},type:"binary-expr",locations:[{start:{line:18,column:37},end:{line:18,column:65}},{start:{line:18,column:71},end:{line:18,column:102}},{start:{line:19,column:12},end:{line:19,column:35}},{start:{line:19,column:41},end:{line:19,column:63}}],line:18},"1":{loc:{start:{line:28,column:6},end:{line:32,column:7}},type:"if",locations:[{start:{line:28,column:6},end:{line:32,column:7}},{start:{line:28,column:6},end:{line:32,column:7}}],line:28},"2":{loc:{start:{line:61,column:6},end:{line:78,column:7}},type:"switch",locations:[{start:{line:62,column:8},end:{line:65,column:15}},{start:{line:66,column:8},end:{line:69,column:15}},{start:{line:70,column:8},end:{line:73,column:15}},{start:{line:74,column:8},end:{line:77,column:15}}],line:61},"3":{loc:{start:{line:92,column:6},end:{line:110,column:7}},type:"switch",locations:[{start:{line:93,column:8},end:{line:96,column:15}},{start:{line:98,column:8},end:{line:101,column:15}},{start:{line:102,column:8},end:{line:105,column:15}},{start:{line:106,column:8},end:{line:109,column:15}}],line:92},"4":{loc:{start:{line:127,column:6},end:{line:130,column:7}},type:"if",locations:[{start:{line:127,column:6},end:{line:130,column:7}},{start:{line:127,column:6},end:{line:130,column:7}}],line:127},"5":{loc:{start:{line:127,column:10},end:{line:127,column:37}},type:"binary-expr",locations:[{start:{line:127,column:10},end:{line:127,column:14}},{start:{line:127,column:18},end:{line:127,column:37}}],line:127},"6":{loc:{start:{line:129,column:15},end:{line:129,column:88}},type:"cond-expr",locations:[{start:{line:129,column:25},end:{line:129,column:66}},{start:{line:129,column:69},end:{line:129,column:88}}],line:129},"7":{loc:{start:{line:152,column:6},end:{line:159,column:7}},type:"if",locations:[{start:{line:152,column:6},end:{line:159,column:7}},{start:{line:152,column:6},end:{line:159,column:7}}],line:152},"8":{loc:{start:{line:152,column:10},end:{line:152,column:44}},type:"binary-expr",locations:[{start:{line:152,column:10},end:{line:152,column:14}},{start:{line:152,column:18},end:{line:152,column:44}}],line:152},"9":{loc:{start:{line:153,column:8},end:{line:158,column:9}},type:"if",locations:[{start:{line:153,column:8},end:{line:158,column:9}},{start:{line:153,column:8},end:{line:158,column:9}}],line:153},"10":{loc:{start:{line:153,column:12},end:{line:153,column:101}},type:"binary-expr",locations:[{start:{line:153,column:12},end:{line:153,column:36}},{start:{line:153,column:40},end:{line:153,column:76}},{start:{line:153,column:80},end:{line:153,column:101}}],line:153},"11":{loc:{start:{line:157,column:17},end:{line:157,column:89}},type:"cond-expr",locations:[{start:{line:157,column:27},end:{line:157,column:67}},{start:{line:157,column:70},end:{line:157,column:89}}],line:157}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},b:{"0":[0,0,0,0],"1":[0,0],"2":[0,0,0,0],"3":[0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0]},_coverageSchema:"d34fc3e6b8297bcde183f5492bcb8fcb36775295"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const Sequelize=(cov_e1mmhbbz3.s[0]++,require('sequelize'));const Op=(cov_e1mmhbbz3.s[1]++,Sequelize.Op);cov_e1mmhbbz3.s[2]++;module.exports=function setupAppointment(AppointmentModel,UserModel){cov_e1mmhbbz3.f[0]++;// Primero vamos a hacer un funcion asincrona para crear o actualizar los datos
// La vamos asignar a un usuario especÃ­fico.
async function createOrUpdate(ccid,appointment){cov_e1mmhbbz3.f[1]++;const user=(cov_e1mmhbbz3.s[3]++,await UserModel.findOne({where:{ccid}}));const existingAppointmentBelongtoUser=(cov_e1mmhbbz3.s[4]++,await AppointmentModel.findOne({where:{id:appointment.id,userId:user.id}}));const condCreatingAndUpdate=(cov_e1mmhbbz3.s[5]++,(cov_e1mmhbbz3.b[0][0]++,appointment.assignedid===0)&&(cov_e1mmhbbz3.b[0][1]++,appointment.assignedname==='')&&(cov_e1mmhbbz3.b[0][2]++,appointment.state===1)&&(cov_e1mmhbbz3.b[0][3]++,user.type==='doctor'));// Si la cita ya existe, se actualiza
//if (existingAppointmentBelongtoUser && condCreatingAndUpdate) {
//  const updated = await AppointmentModel.update(appointment, {id:appointment.id})
//  return updated ? AppointmentModel.findById(appointment.id) : existingAppointmentBelongtoUser
//}
// El usuario existe, es un doctor y ha diligencciado correctamente la cita
cov_e1mmhbbz3.s[6]++;if(condCreatingAndUpdate){cov_e1mmhbbz3.b[1][0]++;cov_e1mmhbbz3.s[7]++;Object.assign(appointment,{userId:user.id});const result=(cov_e1mmhbbz3.s[8]++,await AppointmentModel.create(appointment));cov_e1mmhbbz3.s[9]++;return result.toJSON();}else{cov_e1mmhbbz3.b[1][1]++;}}// Fin de async function create
// Ahora vamos a agrupar por dÃ­a/dÃ­as las citas no asignadas ya creada por los doctores.
// Â¿DeberÃ­a usar async? Â¿Vamos a usar await?
async function findNoAssignedByDate(dayinit,dayend){cov_e1mmhbbz3.f[2]++;cov_e1mmhbbz3.s[10]++;return AppointmentModel.findAll({where:{day:{[Op.lt]:dayinit,[Op.gt]:dayend},state:1}});}// Fin de async function findNoAssignedByWeek
// O las citas por dÃ­as no asignadas con alguna condiciÃ³n mÃ¡s
async function findNoAssignedByGroup(property,value,dayinit,dayend){cov_e1mmhbbz3.f[3]++;let query=(cov_e1mmhbbz3.s[11]++,{where:{day:{[Op.lt]:dayinit,[Op.gt]:dayend},state:1}});cov_e1mmhbbz3.s[12]++;switch(property){case'type':cov_e1mmhbbz3.b[2][0]++;cov_e1mmhbbz3.s[13]++;console.log('Type');cov_e1mmhbbz3.s[14]++;query.where.type=value;cov_e1mmhbbz3.s[15]++;break;case'doctorname':cov_e1mmhbbz3.b[2][1]++;cov_e1mmhbbz3.s[16]++;console.log('doctorname');cov_e1mmhbbz3.s[17]++;query.where.doctorname=value;cov_e1mmhbbz3.s[18]++;break;case'branch':cov_e1mmhbbz3.b[2][2]++;cov_e1mmhbbz3.s[19]++;console.log('branch');cov_e1mmhbbz3.s[20]++;query.where.branch=value;cov_e1mmhbbz3.s[21]++;break;default:cov_e1mmhbbz3.b[2][3]++;cov_e1mmhbbz3.s[22]++;console.log('Default');cov_e1mmhbbz3.s[23]++;query=null;cov_e1mmhbbz3.s[24]++;break;}cov_e1mmhbbz3.s[25]++;return AppointmentModel.findAll(query);}// Fin de async function findNoAssignedByGroup
// O las citas por dÃ­a sin importar la asignaciÃ³n con alguna condiciÃ³n mÃ¡s
async function findByDayGroup(property,value,dayinit,dayend){cov_e1mmhbbz3.f[4]++;let query=(cov_e1mmhbbz3.s[26]++,{where:{day:{[Op.lt]:dayinit,[Op.gt]:dayend}}});cov_e1mmhbbz3.s[27]++;switch(property){case'type':cov_e1mmhbbz3.b[3][0]++;cov_e1mmhbbz3.s[28]++;console.log('Type');cov_e1mmhbbz3.s[29]++;query.where.type=value;cov_e1mmhbbz3.s[30]++;break;case'doctorname':cov_e1mmhbbz3.b[3][1]++;cov_e1mmhbbz3.s[31]++;console.log('doctorname');cov_e1mmhbbz3.s[32]++;query.where.doctorname=value;cov_e1mmhbbz3.s[33]++;break;case'branch':cov_e1mmhbbz3.b[3][2]++;cov_e1mmhbbz3.s[34]++;console.log('branch');cov_e1mmhbbz3.s[35]++;query.where.branch=value;cov_e1mmhbbz3.s[36]++;break;default:cov_e1mmhbbz3.b[3][3]++;cov_e1mmhbbz3.s[37]++;console.log('Default');cov_e1mmhbbz3.s[38]++;query=null;cov_e1mmhbbz3.s[39]++;break;}cov_e1mmhbbz3.s[40]++;return AppointmentModel.findAll(query);}async function assignedAndUpdate(ccid,appointment){cov_e1mmhbbz3.f[5]++;const condUser=(cov_e1mmhbbz3.s[41]++,{where:{ccid:ccid,type:'customer'}// Luego creamos una variable que nos devuelva si existe ese usuario como cliente
});const user=(cov_e1mmhbbz3.s[42]++,await UserModel.findAll(condUser));// Probar que existe la cita
const existingAppointment=(cov_e1mmhbbz3.s[43]++,await AppointmentModel.findById(appointment.id));// o por el id de la cita, para ese usamos findId
// Existe y es un cliente
cov_e1mmhbbz3.s[44]++;if((cov_e1mmhbbz3.b[5][0]++,user)&&(cov_e1mmhbbz3.b[5][1]++,existingAppointment)){cov_e1mmhbbz3.b[4][0]++;const updated=(cov_e1mmhbbz3.s[45]++,await AppointmentModel.update(appointment,{assignedid:ccid,assignedname:user.name,state:2}));cov_e1mmhbbz3.s[46]++;return updated?(cov_e1mmhbbz3.b[6][0]++,AppointmentModel.findById(appointment.id)):(cov_e1mmhbbz3.b[6][1]++,existingAppointment);}else{cov_e1mmhbbz3.b[4][1]++;}// AquÃ­ hay que poner algo por si no se actualiza.
}// Fin de async function create
async function canceledAndUpdate(ccid,appointment){cov_e1mmhbbz3.f[6]++;const condUser=(cov_e1mmhbbz3.s[47]++,{where:{ccid:ccid,type:{[Op.or]:{[Op.eq]:'customer',[Op.eq]:'admin'}}}// Luego creamos una variable que nos devuelva si existe ese usuario como cliente
});const user=(cov_e1mmhbbz3.s[48]++,await UserModel.findOne(condUser));// Probar que existe la cita
const existingAppointment=(cov_e1mmhbbz3.s[49]++,await AppointmentModel.findById(appointment.id));// o por el id de la cita, para ese usamos findId
// Existe y es un cliente
cov_e1mmhbbz3.s[50]++;if((cov_e1mmhbbz3.b[8][0]++,user)&&(cov_e1mmhbbz3.b[8][1]++,appointment.assigned===2)){cov_e1mmhbbz3.b[7][0]++;cov_e1mmhbbz3.s[51]++;if((cov_e1mmhbbz3.b[10][0]++,user.type==='customer')&&(cov_e1mmhbbz3.b[10][1]++,appointment.assignedid===user.ccid)||(cov_e1mmhbbz3.b[10][2]++,user.type==='admin')){cov_e1mmhbbz3.b[9][0]++;const updated=(cov_e1mmhbbz3.s[52]++,await AppointmentModel.update(appointment,{assignedid:'',assignedname:'',state:1}));cov_e1mmhbbz3.s[53]++;return updated?(cov_e1mmhbbz3.b[11][0]++,AppointmentModel.findOne(appointment.id)):(cov_e1mmhbbz3.b[11][1]++,existingAppointment);}else{cov_e1mmhbbz3.b[9][1]++;}}else{cov_e1mmhbbz3.b[7][1]++;}// AquÃ­ hay que poner algo por si no se actualiza.
}// Fin de async function create
/** **************** Funciones de bÃºsqueda normal ****************/ // Buscar por id (one)
function findById(id){cov_e1mmhbbz3.f[7]++;cov_e1mmhbbz3.s[54]++;return AppointmentModel.findById(id);}// Fin de function findById
// Buscar por ccidAssigned (one)
async function findByCCid(ccid){cov_e1mmhbbz3.f[8]++;const user=(cov_e1mmhbbz3.s[55]++,await AppointmentModel.findOne({where:{ccid}}));cov_e1mmhbbz3.s[56]++;return AppointmentModel.findAll({where:{userId:user.id}});}// Fin de funtion findByCCid
async function findByCCidDate(ccid,dayinit,dayend){cov_e1mmhbbz3.f[9]++;const user=(cov_e1mmhbbz3.s[57]++,await UserModel.findOne({where:{ccid}}));cov_e1mmhbbz3.s[58]++;return AppointmentModel.findAll({where:{userId:user.id,day:{[Op.lt]:dayinit,[Op.gt]:dayend}}});}// Fin de funtion findByCCid
cov_e1mmhbbz3.s[59]++;return{createOrUpdate,findNoAssignedByDate,findByCCidDate,findNoAssignedByGroup,findByDayGroup,findByCCid,findById,assignedAndUpdate,canceledAndUpdate};};