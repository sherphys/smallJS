{"version":3,"sources":["appointment-tests.js"],"names":["test","require","sinon","proxyquire","Sequelize","Op","appointmentFixtures","config","logging","UserStub","AppointmentStub","db","sandbox","customer","Object","assign","user","doctor","docuser","oneAppointment","oneapp","appointmentid","id","userid","ccid","ccidchange","appointmentchange","vArgs","where","userId","ccidArgs","ccidArgsCustomer","type","newAppointment","day","hourinit","hourend","doctorname","branch","state","assignedid","assignedname","createdAt","Date","updatedAt","dayinit","dayend","daysArgs","lt","gt","name","beforeEach","createSandbox","hasMany","spy","belongsTo","create","stub","withArgs","returns","Promise","resolve","toJSON","update","extend","findById","byId","calledWith","findOne","byrel","byCCid","byCCidCustomer","findAll","bydays","setupDatabase","afterEach","restore","t","truthy","Appointment","User","serial","true","called","appointment","createOrUpdate","calledOnce","deepEqual","appointments","findNoAssignedByDate","is","length","assignedAndUpdate"],"mappings":"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","file":"appointment-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\nconst Sequelize = require('sequelize')\nconst Op = Sequelize.Op\n\nconst appointmentFixtures = require('./fixtures/appointment')\n\nlet config = {\n  logging() {}\n}\n\nlet UserStub = null\nlet AppointmentStub = null\nlet db = null\nlet sandbox = null\n\nlet customer = Object.assign({}, appointmentFixtures.user)\nlet doctor = Object.assign({}, appointmentFixtures.docuser)\nlet oneAppointment = Object.assign({}, appointmentFixtures.oneapp)\n\nlet appointmentid = oneAppointment.id\nlet userid = doctor.id\nlet ccid = doctor.ccid\n\nlet ccidchange=customer.id\nlet appointmentchange=oneAppointment.id\n\nlet vArgs = {\n  where:{\n    id:oneAppointment.id,\n    userId:oneAppointment.userId\n  }\n}\n\nlet ccidArgs = {\n  where: { ccid }\n}\n\nlet ccidArgsCustomer = {\n  where: {\n    ccid:ccidchange,\n    type:'customer'\n  }\n}\n\nlet newAppointment = {\n  id:5,\n  userId:2,\n  day: '2018-06-28',\n  hourinit: '8:00',\n  hourend:  '9:00',\n  doctorname: 'Pepito Pérez',\n  type: 'General',\n  branch:1,\n  state:1,\n  assignedid:0,\n  assignedname:'',\n  createdAt: new Date(),\n  updatedAt: new Date()\n  // operatorsAliases: false\n}\n\nlet dayinit = '2018-06-20'\nlet dayend = '2018-06-24'\n\n// UserStub = {\n//  hasMany: sinon.spy()\n// }\nlet daysArgs = {\n  where: {\n    day:{\n      [Op.lt]: dayinit,\n      [Op.gt]: dayend\n    },\n    state:1\n  }\n}\n\nlet assign = {assignedid: customer.ccid, assignedname: customer.name, state:2}\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n\n  UserStub = {\n    hasMany: sandbox.spy()\n  }\n\n  AppointmentStub = {\n    belongsTo: sandbox.spy()\n  }\n\n  // Model create and update Stub\n  AppointmentStub.create = sandbox.stub()\n  AppointmentStub.create.withArgs(newAppointment).returns(Promise.resolve({\n    toJSON() { return newAppointment }\n  }))\n\n  AppointmentStub.update = sandbox.stub()\n  AppointmentStub.update.withArgs(oneAppointment).returns(Promise.resolve(oneAppointment))\n  AppointmentStub.update.withArgs(oneAppointment, assign).returns(Promise.resolve(appointmentFixtures.extend(oneAppointment,\n   assign)))\n\n  AppointmentStub.findById = sandbox.stub()\n  AppointmentStub.findById.withArgs(oneAppointment.id).returns(Promise.resolve(appointmentFixtures.byId(oneAppointment.id)))\n  AppointmentStub.findById.calledWith(appointmentchange).returns(Promise.resolve(appointmentFixtures.byId(appointmentchange)))\n  // Model findOne Stub (with ccid)\n  AppointmentStub.findOne = sandbox.stub()\n  AppointmentStub.findOne.withArgs(vArgs).returns(Promise.resolve(appointmentFixtures.byrel(appointmentid, userid)))\n\n  // Model findOne Stub (with ccid)\n  UserStub.findOne = sandbox.stub()\n  UserStub.findOne.withArgs(ccidArgs).returns(Promise.resolve(appointmentFixtures.byCCid(ccid)))\n  UserStub.findOne.withArgs(ccidArgsCustomer).returns(Promise.resolve(appointmentFixtures.byCCidCustomer(ccid)))\n\n  AppointmentStub.findAll = sandbox.stub()\n  AppointmentStub.findAll.withArgs(daysArgs).returns(Promise.resolve(appointmentFixtures.bydays(dayinit, dayend)))\n\n  // Model findById Stub\n  // UserStub.findById = sandbox.stub()\n  // UserStub.findById.withArgs(id).returns(Promise.resolve(userFixtures.byId(id))) */\n\n  const setupDatabase = proxyquire('../', {\n    './models/user': () => UserStub,\n    './models/appointment': () => AppointmentStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('Appointment', t => {\n  t.truthy(db.Appointment, 'Appointment service should exist')\n})\n\ntest('User', t => {\n  t.truthy(db.User, 'User service should exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(UserStub.hasMany.called, 'UserModel.hasMany was executed')\n  t.true(UserStub.hasMany.calledWith(AppointmentStub), 'Argument should be the AppointmentModel')\n  t.true(AppointmentStub.belongsTo.called, 'AppointmentModel.belongsTo was executed')\n  t.true(AppointmentStub.belongsTo.calledWith(UserStub), 'Argument should be the UserModel')\n})\n\ntest.serial('Appointmet#createOrUpdate - new - user - doctor', async t => {\n  let appointment = await db.Appointment.createOrUpdate(ccid, newAppointment)\n\n  // Primero buscamos el usuario\n  t.true(UserStub.findOne.called, 'findOne (user) should be called on model')\n  t.true(UserStub.findOne.calledOnce, 'findOne (user) should be called twice')\n  t.true(UserStub.findOne.calledWith(ccidArgs), 'findOne (user) should be called with ccid args')\n\n  // Luego buscamos la cita\n  t.true(AppointmentStub.findOne.called, 'findOne (appoint) should be called on model')\n  t.true(AppointmentStub.findOne.calledOnce, 'findOne (appoint) should be called once')\n  t.true(AppointmentStub.findOne.calledWith({\n    where:{\n      id:newAppointment.id,\n      userId:newAppointment.userId\n    }\n  }), 'findOne (appoint) should be called with vargs')\n\n  // Luego creamos la cita\n  t.true(AppointmentStub.create.called, 'appointment.create called on model')\n  t.true(AppointmentStub.create.calledOnce, 'appointment.create should be called once')\n  t.true(AppointmentStub.create.calledWith(newAppointment), 'appointment.create should be called with specified args')\n  t.deepEqual(appointment, newAppointment, 'appointment should be the same')\n})\n\ntest.serial('Appointmet#createOrUpdate - exist - user - doctor', async t => {\n  let appointment = await db.Appointment.createOrUpdate(ccid, oneAppointment)\n\n  // Primero buscamos el usuario\n  t.true(UserStub.findOne.called, 'findOne (user) should be called on model')\n  t.true(UserStub.findOne.calledOnce, 'findOne (user) should be called twice')\n  t.true(UserStub.findOne.calledWith(ccidArgs), 'findOne (user) should be called with ccid args')\n\n  // Luego buscamos la cita (que ya existe)\n  t.true(AppointmentStub.findOne.called, 'findOne (appoint) should be called on model')\n  t.true(AppointmentStub.findOne.calledOnce, 'findOne (appoint) should be called twice')\n  t.true(AppointmentStub.findOne.calledWith(vArgs), 'findOne (appoint) should be called with vargs')\n\n  // Volvemos a buscarlas por el id\n  t.true(AppointmentStub.findById.called, 'findById (appoint) should be called on model')\n  t.true(AppointmentStub.findById.calledOnce, 'findById (appoint) should be called twice')\n  t.true(AppointmentStub.findById.calledWith(oneAppointment.id), 'findById (appoint) should be called with vargs')\n\n  // Al encontrarla, la actualizamos\n  t.true(AppointmentStub.update.called, 'appointment.update called on model')\n  t.true(AppointmentStub.update.calledOnce, 'appointment.update should be called once')\n  t.true(AppointmentStub.update.calledWith(oneAppointment), 'appointment.update should be called with specified args')\n\n  t.deepEqual(appointment, oneAppointment, 'appointment should be the same')\n})\n\ntest.serial('Appointment#findNoAssignedByDate', async t => {\n  let appointments = await db.Appointment.findNoAssignedByDate(dayinit, dayend)\n\n  // Buscamos con un alll\n  t.true(AppointmentStub.findAll.called, 'findOne should be called on model')\n  t.true(AppointmentStub.findAll.calledOnce, 'findOne should be called twice')\n  t.true(AppointmentStub.findAll.calledWith(daysArgs), 'findOne should be called with ccid args')\n\n  t.is(appointments.length, appointmentFixtures.bydays(dayinit, dayend).length, 'agents should be the same amount')\n  t.deepEqual(appointments, appointmentFixtures.bydays(dayinit, dayend), 'agents should be the same')\n})\n\ntest.serial('Appointmet#AssignedAndUpdate - exist - user - customer', async t => {\n  let appointment = await db.Appointment.assignedAndUpdate(ccidchange, appointmentchange)\n\n  // Primero buscamos el usuario\n  t.true(UserStub.findOne.called, 'findOne (user) should be called on model')\n  t.true(UserStub.findOne.calledOnce, 'findOne (user) should be called twice')\n  t.true(UserStub.findOne.calledWith(ccidArgsCustomer), 'findOne (user) should be called with ccid args')\n\n  //console.log('User: ' +  JSON.stringify(appointment) + '\\n\\n')\n\n  // Volvemos a buscarlas por el id\n  t.true(AppointmentStub.findById.called, 'findById (appoint) should be called on model')\n  t.true(AppointmentStub.findById.calledOnce, 'findById (appoint) should be called twice')\n  t.true(AppointmentStub.findById.calledWith(appointmentchange), 'findById (appoint) should be called with vargs')\n\n  // Al encontrarla, la actualizamos\n  //t.true(AppointmentStub.update.called, 'appointment.update called on model')\n  //t.true(AppointmentStub.update.calledOnce, 'appointment.update should be called once')\n  //t.true(AppointmentStub.update.calledWith(oneAppointment, assign), 'appointment.update should be called with specified args')\n\n  t.deepEqual(appointment, appointmentFixtures.extend(oneAppointment, assign), 'appointment should be the same')\n})\n"]}