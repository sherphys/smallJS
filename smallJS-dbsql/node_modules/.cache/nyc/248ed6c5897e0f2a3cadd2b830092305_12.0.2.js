'use strict';var cov_97srrczfm=function(){var path="/home/shersnape/Ceiba/Java-Script/Tutorial/JavaScritp-Platzi/smallJS/smallJS-dbsql/tests/appointment-tests.js",hash="69e944b0935d4bad4b8ac077e19ffd2595d1bad4",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/home/shersnape/Ceiba/Java-Script/Tutorial/JavaScritp-Platzi/smallJS/smallJS-dbsql/tests/appointment-tests.js",statementMap:{"0":{start:{line:3,column:30},end:{line:3,column:5630}},"1":{start:{line:4,column:27},end:{line:4,column:486}},"2":{start:{line:4,column:74},end:{line:4,column:93}},"3":{start:{line:4,column:96},end:{line:4,column:236}},"4":{start:{line:4,column:166},end:{line:4,column:219}},"5":{start:{line:4,column:220},end:{line:4,column:233}},"6":{start:{line:4,column:237},end:{line:4,column:454}},"7":{start:{line:4,column:328},end:{line:4,column:341}},"8":{start:{line:4,column:343},end:{line:4,column:362}},"9":{start:{line:4,column:363},end:{line:4,column:451}},"10":{start:{line:4,column:455},end:{line:4,column:482}},"11":{start:{line:6,column:13},end:{line:6,column:27}},"12":{start:{line:7,column:14},end:{line:7,column:30}},"13":{start:{line:8,column:19},end:{line:8,column:40}},"14":{start:{line:10,column:28},end:{line:10,column:61}},"15":{start:{line:11,column:13},end:{line:13,column:1}},"16":{start:{line:15,column:9},end:{line:15,column:10}},"17":{start:{line:16,column:11},end:{line:16,column:13}},"18":{start:{line:17,column:15},end:{line:17,column:19}},"19":{start:{line:18,column:22},end:{line:18,column:26}},"20":{start:{line:19,column:9},end:{line:19,column:13}},"21":{start:{line:20,column:14},end:{line:20,column:18}},"22":{start:{line:22,column:13},end:{line:22,column:59}},"23":{start:{line:23,column:13},end:{line:23,column:58}},"24":{start:{line:25,column:15},end:{line:27,column:1}},"25":{start:{line:29,column:21},end:{line:42,column:1}},"26":{start:{line:44,column:0},end:{line:78,column:3}},"27":{start:{line:45,column:2},end:{line:45,column:34}},"28":{start:{line:47,column:2},end:{line:49,column:4}},"29":{start:{line:51,column:2},end:{line:55,column:4}},"30":{start:{line:55,column:4},end:{line:55,column:44}},"31":{start:{line:56,column:2},end:{line:60,column:6}},"32":{start:{line:58,column:6},end:{line:58,column:28}},"33":{start:{line:72,column:24},end:{line:75,column:4}},"34":{start:{line:73,column:27},end:{line:73,column:35}},"35":{start:{line:74,column:34},end:{line:74,column:49}},"36":{start:{line:77,column:2},end:{line:77,column:35}},"37":{start:{line:80,column:0},end:{line:82,column:3}},"38":{start:{line:81,column:2},end:{line:81,column:31}},"39":{start:{line:84,column:0},end:{line:95,column:3}},"40":{start:{line:85,column:13},end:{line:85,column:39}},"41":{start:{line:87,column:2},end:{line:94,column:35}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:4,column:27},end:{line:4,column:28}},loc:{start:{line:4,column:39},end:{line:4,column:484}},line:4},"1":{name:"PowerAssertRecorder",decl:{start:{line:4,column:50},end:{line:4,column:69}},loc:{start:{line:4,column:72},end:{line:4,column:95}},line:4},"2":{name:"_capt",decl:{start:{line:4,column:143},end:{line:4,column:148}},loc:{start:{line:4,column:164},end:{line:4,column:235}},line:4},"3":{name:"_expr",decl:{start:{line:4,column:284},end:{line:4,column:289}},loc:{start:{line:4,column:305},end:{line:4,column:453}},line:4},"4":{name:"(anonymous_4)",decl:{start:{line:44,column:16},end:{line:44,column:17}},loc:{start:{line:44,column:28},end:{line:78,column:1}},line:44},"5":{name:"(anonymous_5)",decl:{start:{line:73,column:21},end:{line:73,column:22}},loc:{start:{line:73,column:27},end:{line:73,column:35}},line:73},"6":{name:"(anonymous_6)",decl:{start:{line:74,column:28},end:{line:74,column:29}},loc:{start:{line:74,column:34},end:{line:74,column:49}},line:74},"7":{name:"(anonymous_7)",decl:{start:{line:80,column:15},end:{line:80,column:16}},loc:{start:{line:80,column:21},end:{line:82,column:1}},line:80},"8":{name:"(anonymous_8)",decl:{start:{line:84,column:20},end:{line:84,column:21}},loc:{start:{line:84,column:25},end:{line:95,column:1}},line:84}},branchMap:{"0":{loc:{start:{line:81,column:2},end:{line:81,column:30}},type:"binary-expr",locations:[{start:{line:81,column:2},end:{line:81,column:9}},{start:{line:81,column:13},end:{line:81,column:30}}],line:81}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},b:{"0":[0,0]},_coverageSchema:"d34fc3e6b8297bcde183f5492bcb8fcb36775295"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var _powerAssertVisitorKeys=(cov_97srrczfm.s[0]++,'{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareOpaqueType":["id","typeParameters","supertype"],"DeclareVariable":["id"],"DeclareExportDeclaration":["declaration","specifiers","source"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"OpaqueType":["id","typeParameters","impltype","supertype"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"ObjectTypeSpreadProperty":["argument"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}'),_powerAssertRecorder=(cov_97srrczfm.s[1]++,function(){cov_97srrczfm.f[0]++;function PowerAssertRecorder(){cov_97srrczfm.f[1]++;cov_97srrczfm.s[2]++;this.captured=[];}cov_97srrczfm.s[3]++;PowerAssertRecorder.prototype._capt=function _capt(value,espath){cov_97srrczfm.f[2]++;cov_97srrczfm.s[4]++;this.captured.push({value:value,espath:espath});cov_97srrczfm.s[5]++;return value;};cov_97srrczfm.s[6]++;PowerAssertRecorder.prototype._expr=function _expr(value,source){cov_97srrczfm.f[3]++;var capturedValues=(cov_97srrczfm.s[7]++,this.captured);cov_97srrczfm.s[8]++;this.captured=[];cov_97srrczfm.s[9]++;return{powerAssertContext:{value:value,events:capturedValues},source:source};};cov_97srrczfm.s[10]++;return PowerAssertRecorder;}());const test=(cov_97srrczfm.s[11]++,require('ava'));const sinon=(cov_97srrczfm.s[12]++,require('sinon'));const proxyquire=(cov_97srrczfm.s[13]++,require('proxyquire'));const appointmentFixtures=(cov_97srrczfm.s[14]++,require('./fixtures/appointment'));let config=(cov_97srrczfm.s[15]++,{logging(){}});let id=(cov_97srrczfm.s[16]++,1);let ccid=(cov_97srrczfm.s[17]++,10);let UserStub=(cov_97srrczfm.s[18]++,null);let AppointmentStub=(cov_97srrczfm.s[19]++,null);let db=(cov_97srrczfm.s[20]++,null);let sandbox=(cov_97srrczfm.s[21]++,null);let doctor=(cov_97srrczfm.s[22]++,Object.assign({},appointmentFixtures.docuser));let single=(cov_97srrczfm.s[23]++,Object.assign({},appointmentFixtures.single));let ccidArgs=(cov_97srrczfm.s[24]++,{where:{ccid}});let newAppointment=(cov_97srrczfm.s[25]++,{day:'2018-06-28',hourinit:'8:00',hourend:'9:00',doctorname:'Pepito Pérez',type:'General',branch:1,state:1,assignedid:0,assignedname:'',createdAt:new Date(),updatedAt:new Date()// operatorsAliases: false
});cov_97srrczfm.s[26]++;test.beforeEach(async()=>{cov_97srrczfm.f[4]++;cov_97srrczfm.s[27]++;sandbox=sinon.createSandbox();cov_97srrczfm.s[28]++;UserStub={hasMany:sandbox.spy()};cov_97srrczfm.s[29]++;AppointmentStub={belongsTo:sandbox.spy()// Model create Stub
};cov_97srrczfm.s[30]++;AppointmentStub.create=sandbox.stub();cov_97srrczfm.s[31]++;AppointmentStub.create.withArgs(newAppointment).returns(Promise.resolve({toJSON(){cov_97srrczfm.s[32]++;return newAppointment;}}));// Model update Stub
/* UserStub.update = sandbox.stub()
  UserStub.update.withArgs(single, ccidArgs).returns(Promise.resolve(single))
   // Model findOne Stub (with ccid)
  UserStub.findOne = sandbox.stub()
  UserStub.findOne.withArgs(ccidArgs).returns(Promise.resolve(userFixtures.byCCid(ccid)))
   // Model findById Stub
  UserStub.findById = sandbox.stub()
  UserStub.findById.withArgs(id).returns(Promise.resolve(userFixtures.byId(id))) */const setupDatabase=(cov_97srrczfm.s[33]++,proxyquire('../',{'./models/user':()=>{cov_97srrczfm.f[5]++;cov_97srrczfm.s[34]++;return UserStub;},'./models/appointment':()=>{cov_97srrczfm.f[6]++;cov_97srrczfm.s[35]++;return AppointmentStub;}}));cov_97srrczfm.s[36]++;db=await setupDatabase(config);});cov_97srrczfm.s[37]++;test.afterEach(()=>{cov_97srrczfm.f[7]++;cov_97srrczfm.s[38]++;(cov_97srrczfm.b[0][0]++,sandbox)&&(cov_97srrczfm.b[0][1]++,sandbox.restore());});cov_97srrczfm.s[39]++;test('Appointment',t=>{cov_97srrczfm.f[8]++;var _rec=(cov_97srrczfm.s[40]++,new _powerAssertRecorder());cov_97srrczfm.s[41]++;t.truthy(_rec._expr(_rec._capt(_rec._capt(db,'arguments/0/object').Appointment,'arguments/0'),{content:'t.truthy(db.Appointment, \'User service should exist\')',filepath:'tests/appointment-tests.js',line:83,ast:'{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"db","range":[9,11]},"property":{"type":"Identifier","name":"Appointment","range":[12,23]},"computed":false,"range":[9,23]},{"type":"StringLiteral","value":"User service should exist","range":[25,52]}],"range":[0,53]}',tokens:'[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"db","range":[9,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"Appointment","range":[12,23]},{"type":{"label":","},"range":[23,24]},{"type":{"label":"string"},"value":"User service should exist","range":[25,52]},{"type":{"label":")"},"range":[52,53]}]',visitorKeys:_powerAssertVisitorKeys}),'User service should exist');});/*test.serial('Setup', t => {
  t.true(UserStub.hasMany.called, 'UserModel.hasMany was executed')
  t.true(UserStub.hasMany.calledWith(AppointmentStub), 'Argument should be the ScheduleUserModel')
  t.true(AppointmentStub.belongsTo.called, 'SheduleUserModel.belongsTo was executed')
  t.true(AppointmentStub.belongsTo.calledWith(UserStub), 'Argument should be the UserModel')
})

test.serial('User#createOrUpdate - new', async t => {
  let user = await db.User.createOrUpdate(newUser)

  t.true(UserStub.findOne.called, 'findOne should be called on model')
  t.true(UserStub.findOne.calledOnce, 'findOne should be called once')

  // Una para el ccid
  t.true(UserStub.findOne.calledWith({
  where: { ccid: newUser.ccid }
  }), 'findOne should be called with ccid args')

  t.true(UserStub.create.called, 'create should be called on model')
  t.true(UserStub.create.calledOnce, 'create should be called once')
  t.true(UserStub.create.calledWith(newUser), 'create should be called with specified args')

  t.deepEqual(user, newUser, 'agent should be the same')
})

test.serial('User#createOrUpdate - exists', async t => {
  let user = await db.User.createOrUpdate(single)

  t.true(UserStub.findOne.called, 'findOne should be called on model')
  t.true(UserStub.findOne.calledTwice, 'findOne should be called twice')
  // 2 Para el ccid
  t.true(UserStub.findOne.calledWith(ccidArgs), 'findOne should be called with ccid args')

  t.true(UserStub.update.called, 'agent.update called on model')
  t.true(UserStub.update.calledOnce, 'agent.update should be called once')
  t.true(UserStub.update.calledWith(single), 'agent.update should be called with specified args')
  t.deepEqual(user, single, 'agent should be the same')
}) */ //# sourceMappingURL=/home/shersnape/Ceiba/Java-Script/Tutorial/JavaScritp-Platzi/smallJS/smallJS-dbsql/node_modules/.cache/ava/4e822f7706b8c46e3fefe3cc4d6cf76d.js.map