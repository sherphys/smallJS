'use strict';var cov_97srrczfm=function(){var path="/home/shersnape/Ceiba/Java-Script/Tutorial/JavaScritp-Platzi/smallJS/smallJS-dbsql/tests/appointment-tests.js",hash="62e66f1063470c9062764f145ae0067a1e9e984f",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/home/shersnape/Ceiba/Java-Script/Tutorial/JavaScritp-Platzi/smallJS/smallJS-dbsql/tests/appointment-tests.js",statementMap:{"0":{start:{line:3,column:30},end:{line:3,column:5630}},"1":{start:{line:4,column:27},end:{line:4,column:486}},"2":{start:{line:4,column:74},end:{line:4,column:93}},"3":{start:{line:4,column:96},end:{line:4,column:236}},"4":{start:{line:4,column:166},end:{line:4,column:219}},"5":{start:{line:4,column:220},end:{line:4,column:233}},"6":{start:{line:4,column:237},end:{line:4,column:454}},"7":{start:{line:4,column:328},end:{line:4,column:341}},"8":{start:{line:4,column:343},end:{line:4,column:362}},"9":{start:{line:4,column:363},end:{line:4,column:451}},"10":{start:{line:4,column:455},end:{line:4,column:482}},"11":{start:{line:6,column:13},end:{line:6,column:27}},"12":{start:{line:7,column:14},end:{line:7,column:30}},"13":{start:{line:8,column:19},end:{line:8,column:40}},"14":{start:{line:9,column:18},end:{line:9,column:38}},"15":{start:{line:10,column:11},end:{line:10,column:23}},"16":{start:{line:12,column:28},end:{line:12,column:61}},"17":{start:{line:14,column:13},end:{line:16,column:1}},"18":{start:{line:18,column:15},end:{line:18,column:19}},"19":{start:{line:19,column:22},end:{line:19,column:26}},"20":{start:{line:20,column:9},end:{line:20,column:13}},"21":{start:{line:21,column:14},end:{line:21,column:18}},"22":{start:{line:23,column:15},end:{line:23,column:58}},"23":{start:{line:24,column:13},end:{line:24,column:59}},"24":{start:{line:25,column:21},end:{line:25,column:66}},"25":{start:{line:26,column:24},end:{line:26,column:68}},"26":{start:{line:27,column:26},end:{line:27,column:74}},"27":{start:{line:29,column:20},end:{line:29,column:37}},"28":{start:{line:30,column:13},end:{line:30,column:22}},"29":{start:{line:31,column:11},end:{line:31,column:22}},"30":{start:{line:33,column:17},end:{line:33,column:30}},"31":{start:{line:35,column:12},end:{line:42,column:1}},"32":{start:{line:44,column:15},end:{line:46,column:1}},"33":{start:{line:48,column:23},end:{line:53,column:1}},"34":{start:{line:55,column:30},end:{line:60,column:1}},"35":{start:{line:62,column:21},end:{line:77,column:1}},"36":{start:{line:79,column:14},end:{line:79,column:26}},"37":{start:{line:80,column:13},end:{line:80,column:25}},"38":{start:{line:85,column:15},end:{line:96,column:1}},"39":{start:{line:96,column:2},end:{line:146,column:3}},"40":{start:{line:97,column:2},end:{line:97,column:34}},"41":{start:{line:99,column:2},end:{line:101,column:4}},"42":{start:{line:103,column:2},end:{line:107,column:4}},"43":{start:{line:107,column:4},end:{line:107,column:44}},"44":{start:{line:108,column:2},end:{line:112,column:6}},"45":{start:{line:110,column:6},end:{line:110,column:28}},"46":{start:{line:114,column:2},end:{line:114,column:42}},"47":{start:{line:115,column:2},end:{line:115,column:91}},"48":{start:{line:116,column:2},end:{line:116,column:97}},"49":{start:{line:118,column:2},end:{line:118,column:44}},"50":{start:{line:119,column:2},end:{line:119,column:125}},"51":{start:{line:120,column:2},end:{line:120,column:131}},"52":{start:{line:123,column:2},end:{line:123,column:43}},"53":{start:{line:124,column:2},end:{line:124,column:117}},"54":{start:{line:128,column:2},end:{line:128,column:36}},"55":{start:{line:129,column:2},end:{line:129,column:97}},"56":{start:{line:130,column:2},end:{line:130,column:119}},"57":{start:{line:131,column:2},end:{line:131,column:133}},"58":{start:{line:133,column:2},end:{line:133,column:43}},"59":{start:{line:134,column:2},end:{line:134,column:115}},"60":{start:{line:140,column:24},end:{line:143,column:4}},"61":{start:{line:141,column:27},end:{line:141,column:35}},"62":{start:{line:142,column:34},end:{line:142,column:49}},"63":{start:{line:145,column:2},end:{line:145,column:35}},"64":{start:{line:148,column:0},end:{line:150,column:3}},"65":{start:{line:149,column:2},end:{line:149,column:31}},"66":{start:{line:152,column:0},end:{line:163,column:3}},"67":{start:{line:153,column:13},end:{line:153,column:39}},"68":{start:{line:155,column:2},end:{line:162,column:42}},"69":{start:{line:165,column:0},end:{line:176,column:3}},"70":{start:{line:166,column:14},end:{line:166,column:40}},"71":{start:{line:168,column:2},end:{line:175,column:35}},"72":{start:{line:178,column:0},end:{line:216,column:3}},"73":{start:{line:179,column:14},end:{line:179,column:40}},"74":{start:{line:180,column:14},end:{line:180,column:40}},"75":{start:{line:181,column:14},end:{line:181,column:40}},"76":{start:{line:182,column:14},end:{line:182,column:40}},"77":{start:{line:184,column:2},end:{line:191,column:40}},"78":{start:{line:192,column:2},end:{line:199,column:49}},"79":{start:{line:200,column:2},end:{line:207,column:49}},"80":{start:{line:208,column:2},end:{line:215,column:42}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:4,column:27},end:{line:4,column:28}},loc:{start:{line:4,column:39},end:{line:4,column:484}},line:4},"1":{name:"PowerAssertRecorder",decl:{start:{line:4,column:50},end:{line:4,column:69}},loc:{start:{line:4,column:72},end:{line:4,column:95}},line:4},"2":{name:"_capt",decl:{start:{line:4,column:143},end:{line:4,column:148}},loc:{start:{line:4,column:164},end:{line:4,column:235}},line:4},"3":{name:"_expr",decl:{start:{line:4,column:284},end:{line:4,column:289}},loc:{start:{line:4,column:305},end:{line:4,column:453}},line:4},"4":{name:"(anonymous_4)",decl:{start:{line:96,column:18},end:{line:96,column:19}},loc:{start:{line:96,column:30},end:{line:146,column:1}},line:96},"5":{name:"(anonymous_5)",decl:{start:{line:141,column:21},end:{line:141,column:22}},loc:{start:{line:141,column:27},end:{line:141,column:35}},line:141},"6":{name:"(anonymous_6)",decl:{start:{line:142,column:28},end:{line:142,column:29}},loc:{start:{line:142,column:34},end:{line:142,column:49}},line:142},"7":{name:"(anonymous_7)",decl:{start:{line:148,column:15},end:{line:148,column:16}},loc:{start:{line:148,column:21},end:{line:150,column:1}},line:148},"8":{name:"(anonymous_8)",decl:{start:{line:152,column:20},end:{line:152,column:21}},loc:{start:{line:152,column:25},end:{line:163,column:1}},line:152},"9":{name:"(anonymous_9)",decl:{start:{line:165,column:13},end:{line:165,column:14}},loc:{start:{line:165,column:18},end:{line:176,column:1}},line:165},"10":{name:"(anonymous_10)",decl:{start:{line:178,column:21},end:{line:178,column:22}},loc:{start:{line:178,column:26},end:{line:216,column:1}},line:178}},branchMap:{"0":{loc:{start:{line:149,column:2},end:{line:149,column:30}},type:"binary-expr",locations:[{start:{line:149,column:2},end:{line:149,column:9}},{start:{line:149,column:13},end:{line:149,column:30}}],line:149}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},b:{"0":[0,0]},_coverageSchema:"d34fc3e6b8297bcde183f5492bcb8fcb36775295"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var _powerAssertVisitorKeys=(cov_97srrczfm.s[0]++,'{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareOpaqueType":["id","typeParameters","supertype"],"DeclareVariable":["id"],"DeclareExportDeclaration":["declaration","specifiers","source"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"OpaqueType":["id","typeParameters","impltype","supertype"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"ObjectTypeSpreadProperty":["argument"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}'),_powerAssertRecorder=(cov_97srrczfm.s[1]++,function(){cov_97srrczfm.f[0]++;function PowerAssertRecorder(){cov_97srrczfm.f[1]++;cov_97srrczfm.s[2]++;this.captured=[];}cov_97srrczfm.s[3]++;PowerAssertRecorder.prototype._capt=function _capt(value,espath){cov_97srrczfm.f[2]++;cov_97srrczfm.s[4]++;this.captured.push({value:value,espath:espath});cov_97srrczfm.s[5]++;return value;};cov_97srrczfm.s[6]++;PowerAssertRecorder.prototype._expr=function _expr(value,source){cov_97srrczfm.f[3]++;var capturedValues=(cov_97srrczfm.s[7]++,this.captured);cov_97srrczfm.s[8]++;this.captured=[];cov_97srrczfm.s[9]++;return{powerAssertContext:{value:value,events:capturedValues},source:source};};cov_97srrczfm.s[10]++;return PowerAssertRecorder;}());const test=(cov_97srrczfm.s[11]++,require('ava'));const sinon=(cov_97srrczfm.s[12]++,require('sinon'));const proxyquire=(cov_97srrczfm.s[13]++,require('proxyquire'));const Sequelize=(cov_97srrczfm.s[14]++,require('sequelize'));const Op=(cov_97srrczfm.s[15]++,Sequelize.Op);const appointmentFixtures=(cov_97srrczfm.s[16]++,require('./fixtures/appointment'));let config=(cov_97srrczfm.s[17]++,{logging(){}});let UserStub=(cov_97srrczfm.s[18]++,null);let AppointmentStub=(cov_97srrczfm.s[19]++,null);let db=(cov_97srrczfm.s[20]++,null);let sandbox=(cov_97srrczfm.s[21]++,null);let customer=(cov_97srrczfm.s[22]++,Object.assign({},appointmentFixtures.user));let doctor=(cov_97srrczfm.s[23]++,Object.assign({},appointmentFixtures.docuser));let oneAppointment=(cov_97srrczfm.s[24]++,Object.assign({},appointmentFixtures.oneapp));let changeAppointment=(cov_97srrczfm.s[25]++,Object.assign({},appointmentFixtures.upapp));let canceledAppointment=(cov_97srrczfm.s[26]++,Object.assign({},appointmentFixtures.allapp[1]));let appointmentid=(cov_97srrczfm.s[27]++,oneAppointment.id);let userid=(cov_97srrczfm.s[28]++,doctor.id);let ccid=(cov_97srrczfm.s[29]++,doctor.ccid);let ccidchange=(cov_97srrczfm.s[30]++,customer.ccid);let vArgs=(cov_97srrczfm.s[31]++,{where:{day:oneAppointment.day,hourinit:oneAppointment.hourinit,hourend:oneAppointment.hourend,userId:oneAppointment.userId}});let ccidArgs=(cov_97srrczfm.s[32]++,{where:{ccid}});let ccidArgsCustomer=(cov_97srrczfm.s[33]++,{where:{ccid:ccidchange,type:'customer'}});let ccidArgsCustomerOrAdmin=(cov_97srrczfm.s[34]++,{where:{ccid:ccidchange,type:'customer'}});let newAppointment=(cov_97srrczfm.s[35]++,{id:5,userId:2,day:'2018-06-28',hourinit:'8:00',hourend:'9:00',doctorname:'Pepito Pérez',type:'General',branch:1,state:1,assignedid:0,assignedname:'',createdAt:new Date(),updatedAt:new Date()// operatorsAliases: false
});let dayinit=(cov_97srrczfm.s[36]++,'2018-06-20');let dayend=(cov_97srrczfm.s[37]++,'2018-06-24');// UserStub = {
//  hasMany: sinon.spy()
// }
let daysArgs=(cov_97srrczfm.s[38]++,{where:{day:{[Op.gte]:dayinit,[Op.lte]:dayend},state:1// let changeAppointment = appointmentFixtures.extend(oneAppointment,assign)
}});cov_97srrczfm.s[39]++;test.beforeEach(async()=>{cov_97srrczfm.f[4]++;cov_97srrczfm.s[40]++;sandbox=sinon.createSandbox();cov_97srrczfm.s[41]++;UserStub={hasMany:sandbox.spy()};cov_97srrczfm.s[42]++;AppointmentStub={belongsTo:sandbox.spy()// Model create and update Stub
};cov_97srrczfm.s[43]++;AppointmentStub.create=sandbox.stub();cov_97srrczfm.s[44]++;AppointmentStub.create.withArgs(newAppointment).returns(Promise.resolve({toJSON(){cov_97srrczfm.s[45]++;return newAppointment;}}));cov_97srrczfm.s[46]++;AppointmentStub.update=sandbox.stub();cov_97srrczfm.s[47]++;AppointmentStub.update.withArgs(oneAppointment).returns(Promise.resolve(oneAppointment));cov_97srrczfm.s[48]++;AppointmentStub.update.withArgs(changeAppointment).returns(Promise.resolve(changeAppointment));cov_97srrczfm.s[49]++;AppointmentStub.findById=sandbox.stub();cov_97srrczfm.s[50]++;AppointmentStub.findById.withArgs(oneAppointment.id).returns(Promise.resolve(appointmentFixtures.byId(oneAppointment.id)));cov_97srrczfm.s[51]++;AppointmentStub.findById.withArgs(changeAppointment.id).returns(Promise.resolve(appointmentFixtures.byId(changeAppointment.id)));// Model findOne Stub (with ccid)
cov_97srrczfm.s[52]++;AppointmentStub.findOne=sandbox.stub();cov_97srrczfm.s[53]++;AppointmentStub.findOne.withArgs(vArgs).returns(Promise.resolve(appointmentFixtures.byrel(appointmentid,userid)));// Model findOne Stub (with ccid)
cov_97srrczfm.s[54]++;UserStub.findOne=sandbox.stub();cov_97srrczfm.s[55]++;UserStub.findOne.withArgs(ccidArgs).returns(Promise.resolve(appointmentFixtures.byCCid(ccid)));cov_97srrczfm.s[56]++;UserStub.findOne.withArgs(ccidArgsCustomer).returns(Promise.resolve(appointmentFixtures.byCCidCustomer(ccidchange)));cov_97srrczfm.s[57]++;UserStub.findOne.withArgs(ccidArgsCustomerOrAdmin).returns(Promise.resolve(appointmentFixtures.byCCidCustomerOrAdmin(ccidchange)));cov_97srrczfm.s[58]++;AppointmentStub.findAll=sandbox.stub();cov_97srrczfm.s[59]++;AppointmentStub.findAll.withArgs(daysArgs).returns(Promise.resolve(appointmentFixtures.bydays(dayinit,dayend)));// Model findById Stub
// UserStub.findById = sandbox.stub()
// UserStub.findById.withArgs(id).returns(Promise.resolve(userFixtures.byId(id))) */
const setupDatabase=(cov_97srrczfm.s[60]++,proxyquire('../',{'./models/user':()=>{cov_97srrczfm.f[5]++;cov_97srrczfm.s[61]++;return UserStub;},'./models/appointment':()=>{cov_97srrczfm.f[6]++;cov_97srrczfm.s[62]++;return AppointmentStub;}}));cov_97srrczfm.s[63]++;db=await setupDatabase(config);});cov_97srrczfm.s[64]++;test.afterEach(()=>{cov_97srrczfm.f[7]++;cov_97srrczfm.s[65]++;(cov_97srrczfm.b[0][0]++,sandbox)&&(cov_97srrczfm.b[0][1]++,sandbox.restore());});cov_97srrczfm.s[66]++;test('Appointment',t=>{cov_97srrczfm.f[8]++;var _rec=(cov_97srrczfm.s[67]++,new _powerAssertRecorder());cov_97srrczfm.s[68]++;t.truthy(_rec._expr(_rec._capt(_rec._capt(db,'arguments/0/object').Appointment,'arguments/0'),{content:'t.truthy(db.Appointment, \'Appointment service should exist\')',filepath:'tests/appointment-tests.js',line:151,ast:'{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"db","range":[9,11]},"property":{"type":"Identifier","name":"Appointment","range":[12,23]},"computed":false,"range":[9,23]},{"type":"StringLiteral","value":"Appointment service should exist","range":[25,59]}],"range":[0,60]}',tokens:'[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"db","range":[9,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"Appointment","range":[12,23]},{"type":{"label":","},"range":[23,24]},{"type":{"label":"string"},"value":"Appointment service should exist","range":[25,59]},{"type":{"label":")"},"range":[59,60]}]',visitorKeys:_powerAssertVisitorKeys}),'Appointment service should exist');});cov_97srrczfm.s[69]++;test('User',t=>{cov_97srrczfm.f[9]++;var _rec2=(cov_97srrczfm.s[70]++,new _powerAssertRecorder());cov_97srrczfm.s[71]++;t.truthy(_rec2._expr(_rec2._capt(_rec2._capt(db,'arguments/0/object').User,'arguments/0'),{content:'t.truthy(db.User, \'User service should exist\')',filepath:'tests/appointment-tests.js',line:155,ast:'{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"db","range":[9,11]},"property":{"type":"Identifier","name":"User","range":[12,16]},"computed":false,"range":[9,16]},{"type":"StringLiteral","value":"User service should exist","range":[18,45]}],"range":[0,46]}',tokens:'[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"db","range":[9,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"User","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"string"},"value":"User service should exist","range":[18,45]},{"type":{"label":")"},"range":[45,46]}]',visitorKeys:_powerAssertVisitorKeys}),'User service should exist');});cov_97srrczfm.s[72]++;test.serial('Setup',t=>{cov_97srrczfm.f[10]++;var _rec3=(cov_97srrczfm.s[73]++,new _powerAssertRecorder()),_rec4=(cov_97srrczfm.s[74]++,new _powerAssertRecorder()),_rec5=(cov_97srrczfm.s[75]++,new _powerAssertRecorder()),_rec6=(cov_97srrczfm.s[76]++,new _powerAssertRecorder());cov_97srrczfm.s[77]++;t.true(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(UserStub,'arguments/0/object/object').hasMany,'arguments/0/object').called,'arguments/0'),{content:'t.true(UserStub.hasMany.called, \'UserModel.hasMany was executed\')',filepath:'tests/appointment-tests.js',line:159,ast:'{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"hasMany","range":[16,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"called","range":[24,30]},"computed":false,"range":[7,30]},{"type":"StringLiteral","value":"UserModel.hasMany was executed","range":[32,64]}],"range":[0,65]}',tokens:'[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"hasMany","range":[16,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"called","range":[24,30]},{"type":{"label":","},"range":[30,31]},{"type":{"label":"string"},"value":"UserModel.hasMany was executed","range":[32,64]},{"type":{"label":")"},"range":[64,65]}]',visitorKeys:_powerAssertVisitorKeys}),'UserModel.hasMany was executed');cov_97srrczfm.s[78]++;t.true(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(UserStub,'arguments/0/callee/object/object').hasMany,'arguments/0/callee/object').calledWith(_rec4._capt(AppointmentStub,'arguments/0/arguments/0')),'arguments/0'),{content:'t.true(UserStub.hasMany.calledWith(AppointmentStub), \'Argument should be the AppointmentModel\')',filepath:'tests/appointment-tests.js',line:160,ast:'{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"hasMany","range":[16,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"calledWith","range":[24,34]},"computed":false,"range":[7,34]},"arguments":[{"type":"Identifier","name":"AppointmentStub","range":[35,50]}],"range":[7,51]},{"type":"StringLiteral","value":"Argument should be the AppointmentModel","range":[53,94]}],"range":[0,95]}',tokens:'[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"hasMany","range":[16,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"calledWith","range":[24,34]},{"type":{"label":"("},"range":[34,35]},{"type":{"label":"name"},"value":"AppointmentStub","range":[35,50]},{"type":{"label":")"},"range":[50,51]},{"type":{"label":","},"range":[51,52]},{"type":{"label":"string"},"value":"Argument should be the AppointmentModel","range":[53,94]},{"type":{"label":")"},"range":[94,95]}]',visitorKeys:_powerAssertVisitorKeys}),'Argument should be the AppointmentModel');cov_97srrczfm.s[79]++;t.true(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(AppointmentStub,'arguments/0/object/object').belongsTo,'arguments/0/object').called,'arguments/0'),{content:'t.true(AppointmentStub.belongsTo.called, \'AppointmentModel.belongsTo was executed\')',filepath:'tests/appointment-tests.js',line:161,ast:'{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"belongsTo","range":[23,32]},"computed":false,"range":[7,32]},"property":{"type":"Identifier","name":"called","range":[33,39]},"computed":false,"range":[7,39]},{"type":"StringLiteral","value":"AppointmentModel.belongsTo was executed","range":[41,82]}],"range":[0,83]}',tokens:'[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"belongsTo","range":[23,32]},{"type":{"label":"."},"range":[32,33]},{"type":{"label":"name"},"value":"called","range":[33,39]},{"type":{"label":","},"range":[39,40]},{"type":{"label":"string"},"value":"AppointmentModel.belongsTo was executed","range":[41,82]},{"type":{"label":")"},"range":[82,83]}]',visitorKeys:_powerAssertVisitorKeys}),'AppointmentModel.belongsTo was executed');cov_97srrczfm.s[80]++;t.true(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(AppointmentStub,'arguments/0/callee/object/object').belongsTo,'arguments/0/callee/object').calledWith(_rec6._capt(UserStub,'arguments/0/arguments/0')),'arguments/0'),{content:'t.true(AppointmentStub.belongsTo.calledWith(UserStub), \'Argument should be the UserModel\')',filepath:'tests/appointment-tests.js',line:162,ast:'{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"belongsTo","range":[23,32]},"computed":false,"range":[7,32]},"property":{"type":"Identifier","name":"calledWith","range":[33,43]},"computed":false,"range":[7,43]},"arguments":[{"type":"Identifier","name":"UserStub","range":[44,52]}],"range":[7,53]},{"type":"StringLiteral","value":"Argument should be the UserModel","range":[55,89]}],"range":[0,90]}',tokens:'[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"belongsTo","range":[23,32]},{"type":{"label":"."},"range":[32,33]},{"type":{"label":"name"},"value":"calledWith","range":[33,43]},{"type":{"label":"("},"range":[43,44]},{"type":{"label":"name"},"value":"UserStub","range":[44,52]},{"type":{"label":")"},"range":[52,53]},{"type":{"label":","},"range":[53,54]},{"type":{"label":"string"},"value":"Argument should be the UserModel","range":[55,89]},{"type":{"label":")"},"range":[89,90]}]',visitorKeys:_powerAssertVisitorKeys}),'Argument should be the UserModel');});/*test.serial('Appointmet#createOrUpdate - new - user - doctor', async t => {
  let appointment = await db.Appointment.createOrUpdate(ccid, newAppointment)

  // Primero buscamos el usuario
  t.true(UserStub.findOne.called, 'findOne (user) should be called on model')
  t.true(UserStub.findOne.calledOnce, 'findOne (user) should be called twice')
  t.true(UserStub.findOne.calledWith(ccidArgs), 'findOne (user) should be called with ccid args')

  // Luego buscamos la cita
  t.true(AppointmentStub.findOne.called, 'findOne (appoint) should be called on model')
  t.true(AppointmentStub.findOne.calledOnce, 'findOne (appoint) should be called once')
  t.true(AppointmentStub.findOne.calledWith({
    where:{
      id:newAppointment.id,
      userId:newAppointment.userId
    }
  }), 'findOne (appoint) should be called with vargs')

  // Luego creamos la cita
  t.true(AppointmentStub.create.called, 'appointment.create called on model')
  t.true(AppointmentStub.create.calledOnce, 'appointment.create should be called once')
  t.true(AppointmentStub.create.calledWith(newAppointment), 'appointment.create should be called with specified args')
  t.deepEqual(appointment, newAppointment, 'appointment should be the same')
})

test.serial('Appointmet#createOrUpdate - exist - user - doctor', async t => {
  let appointment = await db.Appointment.createOrUpdate(ccid, oneAppointment)

  // Primero buscamos el usuario
  t.true(UserStub.findOne.called, 'findOne (user) should be called on model')
  t.true(UserStub.findOne.calledOnce, 'findOne (user) should be called twice')
  t.true(UserStub.findOne.calledWith(ccidArgs), 'findOne (user) should be called with ccid args')

  // Luego buscamos la cita (que ya existe)
  t.true(AppointmentStub.findOne.called, 'findOne (appoint) should be called on model')
  t.true(AppointmentStub.findOne.calledOnce, 'findOne (appoint) should be called twice')
  t.true(AppointmentStub.findOne.calledWith(vArgs), 'findOne (appoint) should be called with vargs')

  // Volvemos a buscarlas por el id
  t.true(AppointmentStub.findById.called, 'findById (appoint) should be called on model')
  t.true(AppointmentStub.findById.calledOnce, 'findById (appoint) should be called twice')
  t.true(AppointmentStub.findById.calledWith(oneAppointment.id), 'findById (appoint) should be called with vargs')

  // Al encontrarla, la actualizamos
  t.true(AppointmentStub.update.called, 'appointment.update called on model')
  t.true(AppointmentStub.update.calledOnce, 'appointment.update should be called once')
  t.true(AppointmentStub.update.calledWith(oneAppointment), 'appointment.update should be called with specified args')

  t.deepEqual(appointment, oneAppointment, 'appointment should be the same')
})

test.serial('Appointment#findNoAssignedByDate', async t => {
  let appointments = await db.Appointment.findNoAssignedByDate(dayinit, dayend)

  // Buscamos con un alll
  t.true(AppointmentStub.findAll.called, 'findOne should be called on model')
  t.true(AppointmentStub.findAll.calledOnce, 'findOne should be called twice')
  t.true(AppointmentStub.findAll.calledWith(daysArgs), 'findOne should be called with ccid args')

  t.is(appointments.length, appointmentFixtures.bydays(dayinit, dayend).length, 'agents should be the same amount')
  t.deepEqual(appointments, appointmentFixtures.bydays(dayinit, dayend), 'agents should be the same')
})

test.serial('Appointment#AssignedAndUpdate - exist - user - customer', async t => {
  let appointment = await db.Appointment.assignedAndUpdate(ccidchange, changeAppointment.id)

  // Primero buscamos el usuario
  t.true(UserStub.findOne.called, 'findOne (user) should be called on model')
  t.true(UserStub.findOne.calledOnce, 'findOne (user) should be called twice')
  t.true(UserStub.findOne.calledWith(ccidArgsCustomerOrAdmin), 'findOne (user) should be called with ccid args')

  // Volvemos a buscarlas por el id
  t.true(AppointmentStub.findById.called, 'findById (appoint) should be called on model')
  t.true(AppointmentStub.findById.calledTwice, 'findById (appoint) should be called twice')
  t.true(AppointmentStub.findById.calledWith(changeAppointment.id), 'findById (appoint) should be called with vargs')

  // console.log('El total de los usuario es: ' +  JSON.stringify(appointmentFixtures.extend(oneAppointment,
  //  assign)) + '\n\n')

  // Al encontrarla, la actualizamos
  t.true(AppointmentStub.update.called, 'appointment.update called on model')
  t.true(AppointmentStub.update.calledOnce, 'appointment.update should be called once')
  t.true(AppointmentStub.update.calledWith(changeAppointment), 'appointment.update should be called with specified args')

  t.deepEqual(appointment, changeAppointment, 'appointment should be the same')
})

test.serial('Appointmet#CanceledAndUpdate - exist - user/admin - customer', async t => {
  let appointment = await db.Appointment.assignedAndUpdate(ccidchange, canceledAppointment.id)

  // Primero buscamos el usuario  t.true(UserStub.findOne.called, 'findOne (user) should be called on model')
  t.true(UserStub.findOne.calledOnce, 'findOne (user) should be called twice')
  t.true(UserStub.findOne.calledWith(ccidArgsCustomerOrAdmin), 'findOne (user) should be called with ccid args')

  // Volvemos a buscarlas por el id
  t.true(AppointmentStub.findById.called, 'findById (appoint) should be called on model')
  t.true(AppointmentStub.findById.calledTwice, 'findById (appoint) should be called twice')
  t.true(AppointmentStub.findById.calledWith(canceledAppointment.id), 'findById (appoint) should be called with vargs')

  // console.log('El total de los usuario es: ' +  JSON.stringify(appointmentFixtures.extend(oneAppointment,
  //  assign)) + '\n\n')

  // Al encontrarla, la actualizamos
  t.true(AppointmentStub.update.called, 'appointment.update called on model')
  t.true(AppointmentStub.update.calledOnce, 'appointment.update should be called once')
  t.true(AppointmentStub.update.calledWith(canceledAppointment), 'appointment.update should be called with specified args')

  t.deepEqual(appointment, canceledAppointment, 'appointment should be the same')
})*/ //# sourceMappingURL=/home/shersnape/Ceiba/Java-Script/Tutorial/JavaScritp-Platzi/smallJS/smallJS-dbsql/node_modules/.cache/ava/50de065d7dd74c0d603bdc1c3289b956.js.map