'use strict';var cov_38efua5uf=function(){var path="/home/shersnape/Ceiba/Java-Script/Tutorial/JavaScritp-Platzi/smallJS/smallJS-dbsql/lib/user.js",hash="2e69245a7b8406a34e31a08adf6bd34aaa0b5551",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/home/shersnape/Ceiba/Java-Script/Tutorial/JavaScritp-Platzi/smallJS/smallJS-dbsql/lib/user.js",statementMap:{"0":{start:{line:3,column:0},end:{line:80,column:1}},"1":{start:{line:7,column:17},end:{line:11,column:5}},"2":{start:{line:13,column:20},end:{line:15,column:5}},"3":{start:{line:18,column:27},end:{line:18,column:56}},"4":{start:{line:19,column:27},end:{line:19,column:59}},"5":{start:{line:22,column:4},end:{line:25,column:5}},"6":{start:{line:23,column:22},end:{line:23,column:56}},"7":{start:{line:24,column:6},end:{line:24,column:61}},"8":{start:{line:29,column:19},end:{line:29,column:47}},"9":{start:{line:30,column:4},end:{line:30,column:26}},"10":{start:{line:34,column:4},end:{line:34,column:33}},"11":{start:{line:38,column:4},end:{line:42,column:6}},"12":{start:{line:72,column:2},end:{line:79,column:3}}},fnMap:{"0":{name:"setupUser",decl:{start:{line:3,column:26},end:{line:3,column:35}},loc:{start:{line:3,column:47},end:{line:80,column:1}},line:3},"1":{name:"createOrUpdate",decl:{start:{line:6,column:19},end:{line:6,column:33}},loc:{start:{line:6,column:44},end:{line:31,column:3}},line:6},"2":{name:"findById",decl:{start:{line:33,column:11},end:{line:33,column:19}},loc:{start:{line:33,column:24},end:{line:35,column:3}},line:33},"3":{name:"findByCCid",decl:{start:{line:37,column:11},end:{line:37,column:21}},loc:{start:{line:37,column:28},end:{line:43,column:3}},line:37}},branchMap:{"0":{loc:{start:{line:22,column:4},end:{line:25,column:5}},type:"if",locations:[{start:{line:22,column:4},end:{line:25,column:5}},{start:{line:22,column:4},end:{line:25,column:5}}],line:22},"1":{loc:{start:{line:24,column:13},end:{line:24,column:61}},type:"cond-expr",locations:[{start:{line:24,column:23},end:{line:24,column:46}},{start:{line:24,column:49},end:{line:24,column:61}}],line:24}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"d34fc3e6b8297bcde183f5492bcb8fcb36775295"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_38efua5uf.s[0]++;module.exports=function setupUser(UserModel){cov_38efua5uf.f[0]++;// Primero vamos a hacer un funcion asincrona para crear o actualizar los datos
// El usuario existe si existe la condición
async function createOrUpdate(user){cov_38efua5uf.f[1]++;const cond=(cov_38efua5uf.s[1]++,{where:{ccid:user.ccid}// Primero definimos una condición de existencia
});const condips=(cov_38efua5uf.s[2]++,{where:{ips:user.ips}// Luego creamos una variable que nos devuelva si existe o no la condición
});const existingUser=(cov_38efua5uf.s[3]++,await UserModel.findOne(cond));const allocationUser=(cov_38efua5uf.s[4]++,await UserModel.findOne(condips));// De ser verdadera, entonces el usuario existe y realizamos una actualización
cov_38efua5uf.s[5]++;if(existingUser){cov_38efua5uf.b[0][0]++;const updated=(cov_38efua5uf.s[6]++,await UserModel.update(user,cond));cov_38efua5uf.s[7]++;return updated?(cov_38efua5uf.b[1][0]++,UserModel.findOne(cond)):(cov_38efua5uf.b[1][1]++,existingUser);}else{cov_38efua5uf.b[0][1]++;}// El if anterior devuelve el existingUser si no existe el usuario, no hace más
// Y se modifica el user crendo un JSON
const result=(cov_38efua5uf.s[8]++,await UserModel.create(user));cov_38efua5uf.s[9]++;return result.toJSON();}// Fin de async function
function findById(id){cov_38efua5uf.f[2]++;cov_38efua5uf.s[10]++;return UserModel.findById(id);}// Fin de function findById
function findByCCid(ccid){cov_38efua5uf.f[3]++;cov_38efua5uf.s[11]++;return UserModel.findOne({where:{ccid}});}// Fin de funtion findByCCid
/*
  function findAll () {
    return AgentModel.findAll()
  }
  */ /*
  function findConnected () {
    return AgentModel.findAll({
      where: {
        connected: true
      }
    })
  }
  */ /*
  function findByUsername (username) {
    return AgentModel.findAll({
      where: {
        username,
        connected: true
      }
    })
  }
  */cov_38efua5uf.s[12]++;return{createOrUpdate,findById,findByCCid// findAll,
// findConnected,
// findByUsername
};};