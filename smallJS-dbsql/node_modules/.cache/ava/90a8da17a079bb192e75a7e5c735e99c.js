'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareOpaqueType":["id","typeParameters","supertype"],"DeclareVariable":["id"],"DeclareExportDeclaration":["declaration","specifiers","source"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"OpaqueType":["id","typeParameters","impltype","supertype"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"ObjectTypeSpreadProperty":["argument"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

const test = require('ava');
const sinon = require('sinon');
const proxyquire = require('proxyquire');

const userFixtures = require('./fixtures/user');
let config = {
  logging() {}
};

let ScheduleUserStub = {
  belongsTo: sinon.spy()
};

let ScheduleIPSStub = {
  belongsTo: sinon.spy()
};

let id = 1;
let ccid = '1082872742';
let UserStub = null;
let db = null;
let sandbox = null;

let single = Object.assign({}, userFixtures.single);

/* let connectedArgs = {
  where: { connected: true }
}

let usernameArgs = {
  where: { username: 'Shers', connected: true }
} */

let ccidArgs = {
  where: { ccid }
};

let newUser = {
  flags: false,
  id: 2,
  ccid: '1082872743',
  IPS: 1,
  IPSextra: JSON.parse('[2, 3]'),
  firstname: 'Sheryl',
  lastname: 'AvendaÃ±o',
  username: 'Shers',
  password: 'ajayque',
  hostname: 'test-host',
  pid: 1,
  connected: false,
  createdAt: new Date(),
  updatedAt: new Date(),
  operatorsAliases: false
};
test.beforeEach(async () => {
  sandbox = sinon.createSandbox();

  UserStub = {
    hasMany: sandbox.spy()

    // Model create Stub
  };UserStub.create = sandbox.stub();
  UserStub.create.withArgs(newUser).returns(Promise.resolve({
    toJSON() {
      return newUser;
    }
  }));

  // Model update Stub
  UserStub.update = sandbox.stub();
  UserStub.update.withArgs(single, ccidArgs).returns(Promise.resolve(single));

  // Model findOne Stub
  UserStub.findOne = sandbox.stub();
  UserStub.findOne.withArgs(ccidArgs).returns(Promise.resolve(userFixtures.byCCid(ccid)));

  // Model findById Stub
  UserStub.findById = sandbox.stub();
  UserStub.findById.withArgs(id).returns(Promise.resolve(userFixtures.byId(id)));

  // Model findAll Stub
  UserStub.findAll = sandbox.stub();
  UserStub.findAll.withArgs().returns(Promise.resolve(userFixtures.all));
  // UserStub.findAll.withArgs(connectedArgs).returns(Promise.resolve(userFixtures.connected))
  // UserStub.findAll.withArgs(usernameArgs).returns(Promise.resolve(userFixtures.platzi))

  const setupDatabase = proxyquire('../', {
    './models/user': () => UserStub,
    './models/scheduleuser': () => ScheduleUserStub,
    './models/scheduleips': () => ScheduleIPSStub
  });

  db = await setupDatabase(config);
});

test.afterEach(() => {
  sandbox && sandbox.restore();
});

test('User', t => {
  var _rec = new _powerAssertRecorder();

  t.truthy(_rec._expr(_rec._capt(_rec._capt(db, 'arguments/0/object').User, 'arguments/0'), {
    content: 't.truthy(db.User, \'User service should exist\')',
    filepath: 'tests/user-tests.js',
    line: 102,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"db","range":[9,11]},"property":{"type":"Identifier","name":"User","range":[12,16]},"computed":false,"range":[9,16]},{"type":"StringLiteral","value":"User service should exist","range":[18,45]}],"range":[0,46]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"db","range":[9,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"User","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"string"},"value":"User service should exist","range":[18,45]},{"type":{"label":")"},"range":[45,46]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'User service should exist');
});

test.serial('Setup', t => {
  var _rec2 = new _powerAssertRecorder(),
      _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder(),
      _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder(),
      _rec7 = new _powerAssertRecorder();

  t.true(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(UserStub, 'arguments/0/object/object').hasMany, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(UserStub.hasMany.called, \'UserModel.hasMany was executed\')',
    filepath: 'tests/user-tests.js',
    line: 106,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"hasMany","range":[16,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"called","range":[24,30]},"computed":false,"range":[7,30]},{"type":"StringLiteral","value":"UserModel.hasMany was executed","range":[32,64]}],"range":[0,65]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"hasMany","range":[16,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"called","range":[24,30]},{"type":{"label":","},"range":[30,31]},{"type":{"label":"string"},"value":"UserModel.hasMany was executed","range":[32,64]},{"type":{"label":")"},"range":[64,65]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'UserModel.hasMany was executed');
  t.true(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(UserStub, 'arguments/0/callee/object/object').hasMany, 'arguments/0/callee/object').calledWith(_rec3._capt(ScheduleUserStub, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(UserStub.hasMany.calledWith(ScheduleUserStub), \'Argument should be the ScheduleUserModel\')',
    filepath: 'tests/user-tests.js',
    line: 107,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"hasMany","range":[16,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"calledWith","range":[24,34]},"computed":false,"range":[7,34]},"arguments":[{"type":"Identifier","name":"ScheduleUserStub","range":[35,51]}],"range":[7,52]},{"type":"StringLiteral","value":"Argument should be the ScheduleUserModel","range":[54,96]}],"range":[0,97]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"hasMany","range":[16,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"calledWith","range":[24,34]},{"type":{"label":"("},"range":[34,35]},{"type":{"label":"name"},"value":"ScheduleUserStub","range":[35,51]},{"type":{"label":")"},"range":[51,52]},{"type":{"label":","},"range":[52,53]},{"type":{"label":"string"},"value":"Argument should be the ScheduleUserModel","range":[54,96]},{"type":{"label":")"},"range":[96,97]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument should be the ScheduleUserModel');
  t.true(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(ScheduleUserStub, 'arguments/0/object/object').belongsTo, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(ScheduleUserStub.belongsTo.called, \'SheduleUserModel.belongsTo was executed\')',
    filepath: 'tests/user-tests.js',
    line: 108,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"ScheduleUserStub","range":[7,23]},"property":{"type":"Identifier","name":"belongsTo","range":[24,33]},"computed":false,"range":[7,33]},"property":{"type":"Identifier","name":"called","range":[34,40]},"computed":false,"range":[7,40]},{"type":"StringLiteral","value":"SheduleUserModel.belongsTo was executed","range":[42,83]}],"range":[0,84]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"ScheduleUserStub","range":[7,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"belongsTo","range":[24,33]},{"type":{"label":"."},"range":[33,34]},{"type":{"label":"name"},"value":"called","range":[34,40]},{"type":{"label":","},"range":[40,41]},{"type":{"label":"string"},"value":"SheduleUserModel.belongsTo was executed","range":[42,83]},{"type":{"label":")"},"range":[83,84]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'SheduleUserModel.belongsTo was executed');
  t.true(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(ScheduleUserStub, 'arguments/0/callee/object/object').belongsTo, 'arguments/0/callee/object').calledWith(_rec5._capt(UserStub, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(ScheduleUserStub.belongsTo.calledWith(UserStub), \'Argument should be the UserModel\')',
    filepath: 'tests/user-tests.js',
    line: 109,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"ScheduleUserStub","range":[7,23]},"property":{"type":"Identifier","name":"belongsTo","range":[24,33]},"computed":false,"range":[7,33]},"property":{"type":"Identifier","name":"calledWith","range":[34,44]},"computed":false,"range":[7,44]},"arguments":[{"type":"Identifier","name":"UserStub","range":[45,53]}],"range":[7,54]},{"type":"StringLiteral","value":"Argument should be the UserModel","range":[56,90]}],"range":[0,91]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"ScheduleUserStub","range":[7,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"belongsTo","range":[24,33]},{"type":{"label":"."},"range":[33,34]},{"type":{"label":"name"},"value":"calledWith","range":[34,44]},{"type":{"label":"("},"range":[44,45]},{"type":{"label":"name"},"value":"UserStub","range":[45,53]},{"type":{"label":")"},"range":[53,54]},{"type":{"label":","},"range":[54,55]},{"type":{"label":"string"},"value":"Argument should be the UserModel","range":[56,90]},{"type":{"label":")"},"range":[90,91]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument should be the UserModel');
  t.true(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(ScheduleIPSStub, 'arguments/0/object/object').belongsTo, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(ScheduleIPSStub.belongsTo.called, \'SheduleIPSModel.belongsTo was executed\')',
    filepath: 'tests/user-tests.js',
    line: 110,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"ScheduleIPSStub","range":[7,22]},"property":{"type":"Identifier","name":"belongsTo","range":[23,32]},"computed":false,"range":[7,32]},"property":{"type":"Identifier","name":"called","range":[33,39]},"computed":false,"range":[7,39]},{"type":"StringLiteral","value":"SheduleIPSModel.belongsTo was executed","range":[41,81]}],"range":[0,82]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"ScheduleIPSStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"belongsTo","range":[23,32]},{"type":{"label":"."},"range":[32,33]},{"type":{"label":"name"},"value":"called","range":[33,39]},{"type":{"label":","},"range":[39,40]},{"type":{"label":"string"},"value":"SheduleIPSModel.belongsTo was executed","range":[41,81]},{"type":{"label":")"},"range":[81,82]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'SheduleIPSModel.belongsTo was executed');
  t.true(_rec7._expr(_rec7._capt(_rec7._capt(_rec7._capt(ScheduleIPSStub, 'arguments/0/callee/object/object').belongsTo, 'arguments/0/callee/object').calledWith(_rec7._capt(UserStub, 'arguments/0/arguments/0'), _rec7._capt({ as: 'IPS' }, 'arguments/0/arguments/1')), 'arguments/0'), {
    content: 't.true(ScheduleIPSStub.belongsTo.calledWith(UserStub, { as: \'IPS\' }), \'Argument should be the UserModel\')',
    filepath: 'tests/user-tests.js',
    line: 111,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"ScheduleIPSStub","range":[7,22]},"property":{"type":"Identifier","name":"belongsTo","range":[23,32]},"computed":false,"range":[7,32]},"property":{"type":"Identifier","name":"calledWith","range":[33,43]},"computed":false,"range":[7,43]},"arguments":[{"type":"Identifier","name":"UserStub","range":[44,52]},{"type":"ObjectExpression","properties":[{"type":"ObjectProperty","key":{"type":"Identifier","name":"as","range":[56,58]},"value":{"type":"StringLiteral","value":"IPS","range":[60,65]},"computed":false,"shorthand":false,"range":[56,65]}],"range":[54,67]}],"range":[7,68]},{"type":"StringLiteral","value":"Argument should be the UserModel","range":[70,104]}],"range":[0,105]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"ScheduleIPSStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"belongsTo","range":[23,32]},{"type":{"label":"."},"range":[32,33]},{"type":{"label":"name"},"value":"calledWith","range":[33,43]},{"type":{"label":"("},"range":[43,44]},{"type":{"label":"name"},"value":"UserStub","range":[44,52]},{"type":{"label":","},"range":[52,53]},{"type":{"label":"{"},"range":[54,55]},{"type":{"label":"name"},"value":"as","range":[56,58]},{"type":{"label":":"},"range":[58,59]},{"type":{"label":"string"},"value":"IPS","range":[60,65]},{"type":{"label":"}"},"range":[66,67]},{"type":{"label":")"},"range":[67,68]},{"type":{"label":","},"range":[68,69]},{"type":{"label":"string"},"value":"Argument should be the UserModel","range":[70,104]},{"type":{"label":")"},"range":[104,105]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument should be the UserModel');
});

test.serial('Agent#findById', async t => {
  var _rec8 = new _powerAssertRecorder(),
      _rec9 = new _powerAssertRecorder(),
      _rec10 = new _powerAssertRecorder();

  let user = await db.User.findById(id);

  t.true(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(UserStub, 'arguments/0/object/object').findById, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(UserStub.findById.called, \'findById should be called on model\')',
    filepath: 'tests/user-tests.js',
    line: 117,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"findById","range":[16,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"called","range":[25,31]},"computed":false,"range":[7,31]},{"type":"StringLiteral","value":"findById should be called on model","range":[33,69]}],"range":[0,70]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"findById","range":[16,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"called","range":[25,31]},{"type":{"label":","},"range":[31,32]},{"type":{"label":"string"},"value":"findById should be called on model","range":[33,69]},{"type":{"label":")"},"range":[69,70]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findById should be called on model');
  t.true(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(UserStub, 'arguments/0/object/object').findById, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(UserStub.findById.calledOnce, \'findById should be called once\')',
    filepath: 'tests/user-tests.js',
    line: 118,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"findById","range":[16,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledOnce","range":[25,35]},"computed":false,"range":[7,35]},{"type":"StringLiteral","value":"findById should be called once","range":[37,69]}],"range":[0,70]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"findById","range":[16,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledOnce","range":[25,35]},{"type":{"label":","},"range":[35,36]},{"type":{"label":"string"},"value":"findById should be called once","range":[37,69]},{"type":{"label":")"},"range":[69,70]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findById should be called once');
  t.true(_rec10._expr(_rec10._capt(_rec10._capt(_rec10._capt(UserStub, 'arguments/0/callee/object/object').findById, 'arguments/0/callee/object').calledWith(_rec10._capt(id, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(UserStub.findById.calledWith(id), \'findById should be called with specified id\')',
    filepath: 'tests/user-tests.js',
    line: 119,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"findById","range":[16,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledWith","range":[25,35]},"computed":false,"range":[7,35]},"arguments":[{"type":"Identifier","name":"id","range":[36,38]}],"range":[7,39]},{"type":"StringLiteral","value":"findById should be called with specified id","range":[41,86]}],"range":[0,87]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"findById","range":[16,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledWith","range":[25,35]},{"type":{"label":"("},"range":[35,36]},{"type":{"label":"name"},"value":"id","range":[36,38]},{"type":{"label":")"},"range":[38,39]},{"type":{"label":","},"range":[39,40]},{"type":{"label":"string"},"value":"findById should be called with specified id","range":[41,86]},{"type":{"label":")"},"range":[86,87]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findById should be called with specified id');
  t.deepEqual(user, userFixtures.byId(id), 'should be the same');
});

/* test.serial('Agent#findByUuid', async t => {
  let agent = await db.Agent.findByUuid(uuid)

  t.true(UserStub.findOne.called, 'findOne should be called on model')
  t.true(UserStub.findOne.calledOnce, 'findOne should be called once')
  t.true(UserStub.findOne.calledWith(uuidArgs), 'findOne should be called with uuid args')

  t.deepEqual(agent, agentFixtures.byUuid(uuid), 'agent should be the same')
}) */

/* test.serial('Agent#findAll', async t => {
  let agents = await db.Agent.findAll()

  t.true(UserStub.findAll.called, 'findAll should be called on model')
  t.true(UserStub.findAll.calledOnce, 'findAll should be called once')
  t.true(UserStub.findAll.calledWith(), 'findAll should be called without args')

  t.is(agents.length, agentFixtures.all.length, 'agents should be the same amount')
  t.deepEqual(agents, agentFixtures.all, 'agents should be the same')
}) */

/* test.serial('Agent#findConnected', async t => {
  let agents = await db.Agent.findConnected()

  t.true(UserStub.findAll.called, 'findAll should be called on model')
  t.true(UserStub.findAll.calledOnce, 'findAll should be called once')
  t.true(UserStub.findAll.calledWith(connectedArgs), 'findAll should be called with connected args')

  t.is(agents.length, agentFixtures.connected.length, 'agents should be the same amount')
  t.deepEqual(agents, agentFixtures.connected, 'agents should be the same')
}) */

/* test.serial('Agent#findByUsername', async t => {
  let agents = await db.Agent.findByUsername('platzi')

  t.true(UserStub.findAll.called, 'findAll should be called on model')
  t.true(UserStub.findAll.calledOnce, 'findAll should be called once')
  t.true(UserStub.findAll.calledWith(usernameArgs), 'findAll should be called with username args')

  t.is(agents.length, agentFixtures.platzi.length, 'agents should be the same amount')
  t.deepEqual(agents, agentFixtures.platzi, 'agents should be the same')
}) */

/* test.serial('Agent#createOrUpdate - exists', async t => {
  let user = await db.User.createOrUpdate(single)

  t.true(UserStub.findOne.called, 'findOne should be called on model')
  t.true(UserStub.findOne.calledTwice, 'findOne should be called twice')
  t.true(UserStub.findOne.calledWith(ccidArgs), 'findOne should be called with uuid args')
  t.true(UserStub.update.called, 'agent.update called on model')
  t.true(UserStub.update.calledOnce, 'agent.update should be called once')
  t.true(UserStub.update.calledWith(single), 'agent.update should be called with specified args')

  t.deepEqual(user, single, 'agent should be the same')
}) */

test.serial('User#createOrUpdate - new', async t => {
  var _rec11 = new _powerAssertRecorder(),
      _rec12 = new _powerAssertRecorder(),
      _rec13 = new _powerAssertRecorder(),
      _rec14 = new _powerAssertRecorder(),
      _rec15 = new _powerAssertRecorder(),
      _rec16 = new _powerAssertRecorder();

  let user = await db.User.createOrUpdate(newUser);

  t.true(_rec11._expr(_rec11._capt(_rec11._capt(_rec11._capt(UserStub, 'arguments/0/object/object').findOne, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(UserStub.findOne.called, \'findOne should be called on model\')',
    filepath: 'tests/user-tests.js',
    line: 182,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"findOne","range":[16,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"called","range":[24,30]},"computed":false,"range":[7,30]},{"type":"StringLiteral","value":"findOne should be called on model","range":[32,67]}],"range":[0,68]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"findOne","range":[16,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"called","range":[24,30]},{"type":{"label":","},"range":[30,31]},{"type":{"label":"string"},"value":"findOne should be called on model","range":[32,67]},{"type":{"label":")"},"range":[67,68]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called on model');
  t.true(_rec12._expr(_rec12._capt(_rec12._capt(_rec12._capt(UserStub, 'arguments/0/object/object').findOne, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(UserStub.findOne.calledOnce, \'findOne should be called once\')',
    filepath: 'tests/user-tests.js',
    line: 183,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"findOne","range":[16,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"calledOnce","range":[24,34]},"computed":false,"range":[7,34]},{"type":"StringLiteral","value":"findOne should be called once","range":[36,67]}],"range":[0,68]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"findOne","range":[16,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"calledOnce","range":[24,34]},{"type":{"label":","},"range":[34,35]},{"type":{"label":"string"},"value":"findOne should be called once","range":[36,67]},{"type":{"label":")"},"range":[67,68]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called once');

  t.true(_rec13._expr(_rec13._capt(_rec13._capt(_rec13._capt(UserStub, 'arguments/0/callee/object/object').findOne, 'arguments/0/callee/object').calledWith(_rec13._capt({
    where: _rec13._capt({ ccid: _rec13._capt(_rec13._capt(newUser, 'arguments/0/arguments/0/properties/0/value/properties/0/value/object').ccid, 'arguments/0/arguments/0/properties/0/value/properties/0/value') }, 'arguments/0/arguments/0/properties/0/value')
  }, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(UserStub.findOne.calledWith({ where: { ccid: newUser.ccid } }), \'findOne should be called with ccid args\')',
    filepath: 'tests/user-tests.js',
    line: 185,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"findOne","range":[16,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"calledWith","range":[24,34]},"computed":false,"range":[7,34]},"arguments":[{"type":"ObjectExpression","properties":[{"type":"ObjectProperty","key":{"type":"Identifier","name":"where","range":[37,42]},"value":{"type":"ObjectExpression","properties":[{"type":"ObjectProperty","key":{"type":"Identifier","name":"ccid","range":[46,50]},"value":{"type":"MemberExpression","object":{"type":"Identifier","name":"newUser","range":[52,59]},"property":{"type":"Identifier","name":"ccid","range":[60,64]},"computed":false,"range":[52,64]},"computed":false,"shorthand":false,"range":[46,64]}],"range":[44,66]},"computed":false,"shorthand":false,"range":[37,66]}],"range":[35,68]}],"range":[7,69]},{"type":"StringLiteral","value":"findOne should be called with ccid args","range":[71,112]}],"range":[0,113]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"findOne","range":[16,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"calledWith","range":[24,34]},{"type":{"label":"("},"range":[34,35]},{"type":{"label":"{"},"range":[35,36]},{"type":{"label":"name"},"value":"where","range":[37,42]},{"type":{"label":":"},"range":[42,43]},{"type":{"label":"{"},"range":[44,45]},{"type":{"label":"name"},"value":"ccid","range":[46,50]},{"type":{"label":":"},"range":[50,51]},{"type":{"label":"name"},"value":"newUser","range":[52,59]},{"type":{"label":"."},"range":[59,60]},{"type":{"label":"name"},"value":"ccid","range":[60,64]},{"type":{"label":"}"},"range":[65,66]},{"type":{"label":"}"},"range":[67,68]},{"type":{"label":")"},"range":[68,69]},{"type":{"label":","},"range":[69,70]},{"type":{"label":"string"},"value":"findOne should be called with ccid args","range":[71,112]},{"type":{"label":")"},"range":[112,113]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called with ccid args');

  t.true(_rec14._expr(_rec14._capt(_rec14._capt(_rec14._capt(UserStub, 'arguments/0/object/object').create, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(UserStub.create.called, \'create should be called on model\')',
    filepath: 'tests/user-tests.js',
    line: 189,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"create","range":[16,22]},"computed":false,"range":[7,22]},"property":{"type":"Identifier","name":"called","range":[23,29]},"computed":false,"range":[7,29]},{"type":"StringLiteral","value":"create should be called on model","range":[31,65]}],"range":[0,66]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"create","range":[16,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"called","range":[23,29]},{"type":{"label":","},"range":[29,30]},{"type":{"label":"string"},"value":"create should be called on model","range":[31,65]},{"type":{"label":")"},"range":[65,66]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'create should be called on model');
  t.true(_rec15._expr(_rec15._capt(_rec15._capt(_rec15._capt(UserStub, 'arguments/0/object/object').create, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(UserStub.create.calledOnce, \'create should be called once\')',
    filepath: 'tests/user-tests.js',
    line: 190,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"create","range":[16,22]},"computed":false,"range":[7,22]},"property":{"type":"Identifier","name":"calledOnce","range":[23,33]},"computed":false,"range":[7,33]},{"type":"StringLiteral","value":"create should be called once","range":[35,65]}],"range":[0,66]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"create","range":[16,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"calledOnce","range":[23,33]},{"type":{"label":","},"range":[33,34]},{"type":{"label":"string"},"value":"create should be called once","range":[35,65]},{"type":{"label":")"},"range":[65,66]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'create should be called once');
  t.true(_rec16._expr(_rec16._capt(_rec16._capt(_rec16._capt(UserStub, 'arguments/0/callee/object/object').create, 'arguments/0/callee/object').calledWith(_rec16._capt(newUser, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(UserStub.create.calledWith(newUser), \'create should be called with specified args\')',
    filepath: 'tests/user-tests.js',
    line: 191,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"create","range":[16,22]},"computed":false,"range":[7,22]},"property":{"type":"Identifier","name":"calledWith","range":[23,33]},"computed":false,"range":[7,33]},"arguments":[{"type":"Identifier","name":"newUser","range":[34,41]}],"range":[7,42]},{"type":"StringLiteral","value":"create should be called with specified args","range":[44,89]}],"range":[0,90]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"create","range":[16,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"calledWith","range":[23,33]},{"type":{"label":"("},"range":[33,34]},{"type":{"label":"name"},"value":"newUser","range":[34,41]},{"type":{"label":")"},"range":[41,42]},{"type":{"label":","},"range":[42,43]},{"type":{"label":"string"},"value":"create should be called with specified args","range":[44,89]},{"type":{"label":")"},"range":[89,90]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'create should be called with specified args');

  t.deepEqual(user, newUser, 'agent should be the same');
});
//# sourceMappingURL=/home/shersnape/Ceiba/Java-Script/Tutorial/JavaScritp-Platzi/smallJS/smallJS-dbsql/node_modules/.cache/ava/90a8da17a079bb192e75a7e5c735e99c.js.map