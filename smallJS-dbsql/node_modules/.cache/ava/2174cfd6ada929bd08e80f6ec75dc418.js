'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareOpaqueType":["id","typeParameters","supertype"],"DeclareVariable":["id"],"DeclareExportDeclaration":["declaration","specifiers","source"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"OpaqueType":["id","typeParameters","impltype","supertype"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"ObjectTypeSpreadProperty":["argument"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

const test = require('ava');
const sinon = require('sinon');
const proxyquire = require('proxyquire');
const Sequelize = require('sequelize');
const Op = Sequelize.Op;

const appointmentFixtures = require('./fixtures/appointment');

let config = {
  logging() {}
};

let UserStub = null;
let AppointmentStub = null;
let db = null;
let sandbox = null;

let customer = Object.assign({}, appointmentFixtures.user);
let doctor = Object.assign({}, appointmentFixtures.docuser);
let oneAppointment = Object.assign({}, appointmentFixtures.oneapp);

let appointmentid = oneAppointment.id;
let userid = doctor.id;
let ccid = doctor.ccid;

let ccidchange = customer.ccid;
let appointmentchange = oneAppointment.id;

let vArgs = {
  where: {
    id: oneAppointment.id,
    userId: oneAppointment.userId
  }
};

let ccidArgs = {
  where: { ccid }
};

let ccidArgsCustomer = {
  where: {
    ccid: ccidchange,
    type: 'customer'
  }
};

let newAppointment = {
  id: 5,
  userId: 2,
  day: '2018-06-28',
  hourinit: '8:00',
  hourend: '9:00',
  doctorname: 'Pepito PÃ©rez',
  type: 'General',
  branch: 1,
  state: 1,
  assignedid: 0,
  assignedname: '',
  createdAt: new Date(),
  updatedAt: new Date()
  // operatorsAliases: false
};

let dayinit = '2018-06-20';
let dayend = '2018-06-24';

// UserStub = {
//  hasMany: sinon.spy()
// }
let daysArgs = {
  where: {
    day: {
      [Op.lt]: dayinit,
      [Op.gt]: dayend
    },
    state: 1
  }
};

let assign = { assignedid: customer.ccid, assignedname: customer.name, state: 2 };
let changeAppointment = appointmentFixtures.extend(oneAppointment, assign);
//let changeAppointment = Object.assign({}, oneAppointment)

test.beforeEach(async () => {
  sandbox = sinon.createSandbox();

  UserStub = {
    hasMany: sandbox.spy()
  };

  AppointmentStub = {
    belongsTo: sandbox.spy()

    // Model create and update Stub
  };AppointmentStub.create = sandbox.stub();
  AppointmentStub.create.withArgs(newAppointment).returns(Promise.resolve({
    toJSON() {
      return newAppointment;
    }
  }));

  AppointmentStub.update = sandbox.stub();
  AppointmentStub.update.withArgs(oneAppointment).returns(Promise.resolve(oneAppointment));
  AppointmentStub.update.withArgs(changeAppointment, assign).returns(Promise.resolve(appointmentFixtures.extend(changeAppointment, assign)));

  AppointmentStub.findById = sandbox.stub();
  AppointmentStub.findById.withArgs(oneAppointment.id).returns(Promise.resolve(appointmentFixtures.byId(oneAppointment.id)));
  AppointmentStub.findById.withArgs(appointmentchange).returns(Promise.resolve(appointmentFixtures.byId(appointmentchange)));
  // Model findOne Stub (with ccid)

  AppointmentStub.findOne = sandbox.stub();
  AppointmentStub.findOne.withArgs(vArgs).returns(Promise.resolve(appointmentFixtures.byrel(appointmentid, userid)));

  // Model findOne Stub (with ccid)

  UserStub.findOne = sandbox.stub();
  UserStub.findOne.withArgs(ccidArgs).returns(Promise.resolve(appointmentFixtures.byCCid(ccid)));
  UserStub.findOne.withArgs(ccidArgsCustomer).returns(Promise.resolve(appointmentFixtures.byCCidCustomer(ccidchange)));

  AppointmentStub.findAll = sandbox.stub();
  AppointmentStub.findAll.withArgs(daysArgs).returns(Promise.resolve(appointmentFixtures.bydays(dayinit, dayend)));

  // Model findById Stub
  // UserStub.findById = sandbox.stub()
  // UserStub.findById.withArgs(id).returns(Promise.resolve(userFixtures.byId(id))) */

  const setupDatabase = proxyquire('../', {
    './models/user': () => UserStub,
    './models/appointment': () => AppointmentStub
  });

  db = await setupDatabase(config);
});

test.afterEach(() => {
  sandbox && sandbox.restore();
});

test('Appointment', t => {
  var _rec = new _powerAssertRecorder();

  t.truthy(_rec._expr(_rec._capt(_rec._capt(db, 'arguments/0/object').Appointment, 'arguments/0'), {
    content: 't.truthy(db.Appointment, \'Appointment service should exist\')',
    filepath: 'tests/appointment-tests.js',
    line: 143,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"db","range":[9,11]},"property":{"type":"Identifier","name":"Appointment","range":[12,23]},"computed":false,"range":[9,23]},{"type":"StringLiteral","value":"Appointment service should exist","range":[25,59]}],"range":[0,60]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"db","range":[9,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"Appointment","range":[12,23]},{"type":{"label":","},"range":[23,24]},{"type":{"label":"string"},"value":"Appointment service should exist","range":[25,59]},{"type":{"label":")"},"range":[59,60]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'Appointment service should exist');
});

test('User', t => {
  var _rec2 = new _powerAssertRecorder();

  t.truthy(_rec2._expr(_rec2._capt(_rec2._capt(db, 'arguments/0/object').User, 'arguments/0'), {
    content: 't.truthy(db.User, \'User service should exist\')',
    filepath: 'tests/appointment-tests.js',
    line: 147,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"db","range":[9,11]},"property":{"type":"Identifier","name":"User","range":[12,16]},"computed":false,"range":[9,16]},{"type":"StringLiteral","value":"User service should exist","range":[18,45]}],"range":[0,46]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"db","range":[9,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"User","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"string"},"value":"User service should exist","range":[18,45]},{"type":{"label":")"},"range":[45,46]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'User service should exist');
});

test.serial('Setup', t => {
  var _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder(),
      _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder();

  t.true(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(UserStub, 'arguments/0/object/object').hasMany, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(UserStub.hasMany.called, \'UserModel.hasMany was executed\')',
    filepath: 'tests/appointment-tests.js',
    line: 151,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"hasMany","range":[16,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"called","range":[24,30]},"computed":false,"range":[7,30]},{"type":"StringLiteral","value":"UserModel.hasMany was executed","range":[32,64]}],"range":[0,65]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"hasMany","range":[16,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"called","range":[24,30]},{"type":{"label":","},"range":[30,31]},{"type":{"label":"string"},"value":"UserModel.hasMany was executed","range":[32,64]},{"type":{"label":")"},"range":[64,65]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'UserModel.hasMany was executed');
  t.true(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(UserStub, 'arguments/0/callee/object/object').hasMany, 'arguments/0/callee/object').calledWith(_rec4._capt(AppointmentStub, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(UserStub.hasMany.calledWith(AppointmentStub), \'Argument should be the AppointmentModel\')',
    filepath: 'tests/appointment-tests.js',
    line: 152,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"hasMany","range":[16,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"calledWith","range":[24,34]},"computed":false,"range":[7,34]},"arguments":[{"type":"Identifier","name":"AppointmentStub","range":[35,50]}],"range":[7,51]},{"type":"StringLiteral","value":"Argument should be the AppointmentModel","range":[53,94]}],"range":[0,95]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"hasMany","range":[16,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"calledWith","range":[24,34]},{"type":{"label":"("},"range":[34,35]},{"type":{"label":"name"},"value":"AppointmentStub","range":[35,50]},{"type":{"label":")"},"range":[50,51]},{"type":{"label":","},"range":[51,52]},{"type":{"label":"string"},"value":"Argument should be the AppointmentModel","range":[53,94]},{"type":{"label":")"},"range":[94,95]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument should be the AppointmentModel');
  t.true(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(AppointmentStub, 'arguments/0/object/object').belongsTo, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AppointmentStub.belongsTo.called, \'AppointmentModel.belongsTo was executed\')',
    filepath: 'tests/appointment-tests.js',
    line: 153,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"belongsTo","range":[23,32]},"computed":false,"range":[7,32]},"property":{"type":"Identifier","name":"called","range":[33,39]},"computed":false,"range":[7,39]},{"type":"StringLiteral","value":"AppointmentModel.belongsTo was executed","range":[41,82]}],"range":[0,83]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"belongsTo","range":[23,32]},{"type":{"label":"."},"range":[32,33]},{"type":{"label":"name"},"value":"called","range":[33,39]},{"type":{"label":","},"range":[39,40]},{"type":{"label":"string"},"value":"AppointmentModel.belongsTo was executed","range":[41,82]},{"type":{"label":")"},"range":[82,83]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'AppointmentModel.belongsTo was executed');
  t.true(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(AppointmentStub, 'arguments/0/callee/object/object').belongsTo, 'arguments/0/callee/object').calledWith(_rec6._capt(UserStub, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(AppointmentStub.belongsTo.calledWith(UserStub), \'Argument should be the UserModel\')',
    filepath: 'tests/appointment-tests.js',
    line: 154,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"belongsTo","range":[23,32]},"computed":false,"range":[7,32]},"property":{"type":"Identifier","name":"calledWith","range":[33,43]},"computed":false,"range":[7,43]},"arguments":[{"type":"Identifier","name":"UserStub","range":[44,52]}],"range":[7,53]},{"type":"StringLiteral","value":"Argument should be the UserModel","range":[55,89]}],"range":[0,90]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"belongsTo","range":[23,32]},{"type":{"label":"."},"range":[32,33]},{"type":{"label":"name"},"value":"calledWith","range":[33,43]},{"type":{"label":"("},"range":[43,44]},{"type":{"label":"name"},"value":"UserStub","range":[44,52]},{"type":{"label":")"},"range":[52,53]},{"type":{"label":","},"range":[53,54]},{"type":{"label":"string"},"value":"Argument should be the UserModel","range":[55,89]},{"type":{"label":")"},"range":[89,90]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument should be the UserModel');
});

test.serial('Appointmet#createOrUpdate - new - user - doctor', async t => {
  var _rec7 = new _powerAssertRecorder(),
      _rec8 = new _powerAssertRecorder(),
      _rec9 = new _powerAssertRecorder(),
      _rec10 = new _powerAssertRecorder(),
      _rec11 = new _powerAssertRecorder(),
      _rec12 = new _powerAssertRecorder(),
      _rec13 = new _powerAssertRecorder(),
      _rec14 = new _powerAssertRecorder(),
      _rec15 = new _powerAssertRecorder();

  let appointment = await db.Appointment.createOrUpdate(ccid, newAppointment);

  // Primero buscamos el usuario
  t.true(_rec7._expr(_rec7._capt(_rec7._capt(_rec7._capt(UserStub, 'arguments/0/object/object').findOne, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(UserStub.findOne.called, \'findOne (user) should be called on model\')',
    filepath: 'tests/appointment-tests.js',
    line: 161,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"findOne","range":[16,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"called","range":[24,30]},"computed":false,"range":[7,30]},{"type":"StringLiteral","value":"findOne (user) should be called on model","range":[32,74]}],"range":[0,75]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"findOne","range":[16,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"called","range":[24,30]},{"type":{"label":","},"range":[30,31]},{"type":{"label":"string"},"value":"findOne (user) should be called on model","range":[32,74]},{"type":{"label":")"},"range":[74,75]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne (user) should be called on model');
  t.true(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(UserStub, 'arguments/0/object/object').findOne, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(UserStub.findOne.calledOnce, \'findOne (user) should be called twice\')',
    filepath: 'tests/appointment-tests.js',
    line: 162,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"findOne","range":[16,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"calledOnce","range":[24,34]},"computed":false,"range":[7,34]},{"type":"StringLiteral","value":"findOne (user) should be called twice","range":[36,75]}],"range":[0,76]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"findOne","range":[16,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"calledOnce","range":[24,34]},{"type":{"label":","},"range":[34,35]},{"type":{"label":"string"},"value":"findOne (user) should be called twice","range":[36,75]},{"type":{"label":")"},"range":[75,76]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne (user) should be called twice');
  t.true(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(UserStub, 'arguments/0/callee/object/object').findOne, 'arguments/0/callee/object').calledWith(_rec9._capt(ccidArgs, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(UserStub.findOne.calledWith(ccidArgs), \'findOne (user) should be called with ccid args\')',
    filepath: 'tests/appointment-tests.js',
    line: 163,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"findOne","range":[16,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"calledWith","range":[24,34]},"computed":false,"range":[7,34]},"arguments":[{"type":"Identifier","name":"ccidArgs","range":[35,43]}],"range":[7,44]},{"type":"StringLiteral","value":"findOne (user) should be called with ccid args","range":[46,94]}],"range":[0,95]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"findOne","range":[16,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"calledWith","range":[24,34]},{"type":{"label":"("},"range":[34,35]},{"type":{"label":"name"},"value":"ccidArgs","range":[35,43]},{"type":{"label":")"},"range":[43,44]},{"type":{"label":","},"range":[44,45]},{"type":{"label":"string"},"value":"findOne (user) should be called with ccid args","range":[46,94]},{"type":{"label":")"},"range":[94,95]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne (user) should be called with ccid args');

  // Luego buscamos la cita
  t.true(_rec10._expr(_rec10._capt(_rec10._capt(_rec10._capt(AppointmentStub, 'arguments/0/object/object').findOne, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AppointmentStub.findOne.called, \'findOne (appoint) should be called on model\')',
    filepath: 'tests/appointment-tests.js',
    line: 166,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"findOne","range":[23,30]},"computed":false,"range":[7,30]},"property":{"type":"Identifier","name":"called","range":[31,37]},"computed":false,"range":[7,37]},{"type":"StringLiteral","value":"findOne (appoint) should be called on model","range":[39,84]}],"range":[0,85]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"findOne","range":[23,30]},{"type":{"label":"."},"range":[30,31]},{"type":{"label":"name"},"value":"called","range":[31,37]},{"type":{"label":","},"range":[37,38]},{"type":{"label":"string"},"value":"findOne (appoint) should be called on model","range":[39,84]},{"type":{"label":")"},"range":[84,85]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne (appoint) should be called on model');
  t.true(_rec11._expr(_rec11._capt(_rec11._capt(_rec11._capt(AppointmentStub, 'arguments/0/object/object').findOne, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(AppointmentStub.findOne.calledOnce, \'findOne (appoint) should be called once\')',
    filepath: 'tests/appointment-tests.js',
    line: 167,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"findOne","range":[23,30]},"computed":false,"range":[7,30]},"property":{"type":"Identifier","name":"calledOnce","range":[31,41]},"computed":false,"range":[7,41]},{"type":"StringLiteral","value":"findOne (appoint) should be called once","range":[43,84]}],"range":[0,85]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"findOne","range":[23,30]},{"type":{"label":"."},"range":[30,31]},{"type":{"label":"name"},"value":"calledOnce","range":[31,41]},{"type":{"label":","},"range":[41,42]},{"type":{"label":"string"},"value":"findOne (appoint) should be called once","range":[43,84]},{"type":{"label":")"},"range":[84,85]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne (appoint) should be called once');
  t.true(_rec12._expr(_rec12._capt(_rec12._capt(_rec12._capt(AppointmentStub, 'arguments/0/callee/object/object').findOne, 'arguments/0/callee/object').calledWith(_rec12._capt({
    where: _rec12._capt({
      id: _rec12._capt(_rec12._capt(newAppointment, 'arguments/0/arguments/0/properties/0/value/properties/0/value/object').id, 'arguments/0/arguments/0/properties/0/value/properties/0/value'),
      userId: _rec12._capt(_rec12._capt(newAppointment, 'arguments/0/arguments/0/properties/0/value/properties/1/value/object').userId, 'arguments/0/arguments/0/properties/0/value/properties/1/value')
    }, 'arguments/0/arguments/0/properties/0/value')
  }, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(AppointmentStub.findOne.calledWith({ where: { id: newAppointment.id, userId: newAppointment.userId } }), \'findOne (appoint) should be called with vargs\')',
    filepath: 'tests/appointment-tests.js',
    line: 168,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"findOne","range":[23,30]},"computed":false,"range":[7,30]},"property":{"type":"Identifier","name":"calledWith","range":[31,41]},"computed":false,"range":[7,41]},"arguments":[{"type":"ObjectExpression","properties":[{"type":"ObjectProperty","key":{"type":"Identifier","name":"where","range":[44,49]},"value":{"type":"ObjectExpression","properties":[{"type":"ObjectProperty","key":{"type":"Identifier","name":"id","range":[53,55]},"value":{"type":"MemberExpression","object":{"type":"Identifier","name":"newAppointment","range":[57,71]},"property":{"type":"Identifier","name":"id","range":[72,74]},"computed":false,"range":[57,74]},"computed":false,"shorthand":false,"range":[53,74]},{"type":"ObjectProperty","key":{"type":"Identifier","name":"userId","range":[76,82]},"value":{"type":"MemberExpression","object":{"type":"Identifier","name":"newAppointment","range":[84,98]},"property":{"type":"Identifier","name":"userId","range":[99,105]},"computed":false,"range":[84,105]},"computed":false,"shorthand":false,"range":[76,105]}],"range":[51,107]},"computed":false,"shorthand":false,"range":[44,107]}],"range":[42,109]}],"range":[7,110]},{"type":"StringLiteral","value":"findOne (appoint) should be called with vargs","range":[112,159]}],"range":[0,160]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"findOne","range":[23,30]},{"type":{"label":"."},"range":[30,31]},{"type":{"label":"name"},"value":"calledWith","range":[31,41]},{"type":{"label":"("},"range":[41,42]},{"type":{"label":"{"},"range":[42,43]},{"type":{"label":"name"},"value":"where","range":[44,49]},{"type":{"label":":"},"range":[49,50]},{"type":{"label":"{"},"range":[51,52]},{"type":{"label":"name"},"value":"id","range":[53,55]},{"type":{"label":":"},"range":[55,56]},{"type":{"label":"name"},"value":"newAppointment","range":[57,71]},{"type":{"label":"."},"range":[71,72]},{"type":{"label":"name"},"value":"id","range":[72,74]},{"type":{"label":","},"range":[74,75]},{"type":{"label":"name"},"value":"userId","range":[76,82]},{"type":{"label":":"},"range":[82,83]},{"type":{"label":"name"},"value":"newAppointment","range":[84,98]},{"type":{"label":"."},"range":[98,99]},{"type":{"label":"name"},"value":"userId","range":[99,105]},{"type":{"label":"}"},"range":[106,107]},{"type":{"label":"}"},"range":[108,109]},{"type":{"label":")"},"range":[109,110]},{"type":{"label":","},"range":[110,111]},{"type":{"label":"string"},"value":"findOne (appoint) should be called with vargs","range":[112,159]},{"type":{"label":")"},"range":[159,160]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne (appoint) should be called with vargs');

  // Luego creamos la cita
  t.true(_rec13._expr(_rec13._capt(_rec13._capt(_rec13._capt(AppointmentStub, 'arguments/0/object/object').create, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AppointmentStub.create.called, \'appointment.create called on model\')',
    filepath: 'tests/appointment-tests.js',
    line: 176,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"create","range":[23,29]},"computed":false,"range":[7,29]},"property":{"type":"Identifier","name":"called","range":[30,36]},"computed":false,"range":[7,36]},{"type":"StringLiteral","value":"appointment.create called on model","range":[38,74]}],"range":[0,75]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"create","range":[23,29]},{"type":{"label":"."},"range":[29,30]},{"type":{"label":"name"},"value":"called","range":[30,36]},{"type":{"label":","},"range":[36,37]},{"type":{"label":"string"},"value":"appointment.create called on model","range":[38,74]},{"type":{"label":")"},"range":[74,75]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'appointment.create called on model');
  t.true(_rec14._expr(_rec14._capt(_rec14._capt(_rec14._capt(AppointmentStub, 'arguments/0/object/object').create, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(AppointmentStub.create.calledOnce, \'appointment.create should be called once\')',
    filepath: 'tests/appointment-tests.js',
    line: 177,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"create","range":[23,29]},"computed":false,"range":[7,29]},"property":{"type":"Identifier","name":"calledOnce","range":[30,40]},"computed":false,"range":[7,40]},{"type":"StringLiteral","value":"appointment.create should be called once","range":[42,84]}],"range":[0,85]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"create","range":[23,29]},{"type":{"label":"."},"range":[29,30]},{"type":{"label":"name"},"value":"calledOnce","range":[30,40]},{"type":{"label":","},"range":[40,41]},{"type":{"label":"string"},"value":"appointment.create should be called once","range":[42,84]},{"type":{"label":")"},"range":[84,85]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'appointment.create should be called once');
  t.true(_rec15._expr(_rec15._capt(_rec15._capt(_rec15._capt(AppointmentStub, 'arguments/0/callee/object/object').create, 'arguments/0/callee/object').calledWith(_rec15._capt(newAppointment, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(AppointmentStub.create.calledWith(newAppointment), \'appointment.create should be called with specified args\')',
    filepath: 'tests/appointment-tests.js',
    line: 178,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"create","range":[23,29]},"computed":false,"range":[7,29]},"property":{"type":"Identifier","name":"calledWith","range":[30,40]},"computed":false,"range":[7,40]},"arguments":[{"type":"Identifier","name":"newAppointment","range":[41,55]}],"range":[7,56]},{"type":"StringLiteral","value":"appointment.create should be called with specified args","range":[58,115]}],"range":[0,116]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"create","range":[23,29]},{"type":{"label":"."},"range":[29,30]},{"type":{"label":"name"},"value":"calledWith","range":[30,40]},{"type":{"label":"("},"range":[40,41]},{"type":{"label":"name"},"value":"newAppointment","range":[41,55]},{"type":{"label":")"},"range":[55,56]},{"type":{"label":","},"range":[56,57]},{"type":{"label":"string"},"value":"appointment.create should be called with specified args","range":[58,115]},{"type":{"label":")"},"range":[115,116]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'appointment.create should be called with specified args');
  t.deepEqual(appointment, newAppointment, 'appointment should be the same');
});

test.serial('Appointmet#createOrUpdate - exist - user - doctor', async t => {
  var _rec16 = new _powerAssertRecorder(),
      _rec17 = new _powerAssertRecorder(),
      _rec18 = new _powerAssertRecorder(),
      _rec19 = new _powerAssertRecorder(),
      _rec20 = new _powerAssertRecorder(),
      _rec21 = new _powerAssertRecorder(),
      _rec22 = new _powerAssertRecorder(),
      _rec23 = new _powerAssertRecorder(),
      _rec24 = new _powerAssertRecorder(),
      _rec25 = new _powerAssertRecorder(),
      _rec26 = new _powerAssertRecorder(),
      _rec27 = new _powerAssertRecorder();

  let appointment = await db.Appointment.createOrUpdate(ccid, oneAppointment);

  // Primero buscamos el usuario
  t.true(_rec16._expr(_rec16._capt(_rec16._capt(_rec16._capt(UserStub, 'arguments/0/object/object').findOne, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(UserStub.findOne.called, \'findOne (user) should be called on model\')',
    filepath: 'tests/appointment-tests.js',
    line: 186,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"findOne","range":[16,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"called","range":[24,30]},"computed":false,"range":[7,30]},{"type":"StringLiteral","value":"findOne (user) should be called on model","range":[32,74]}],"range":[0,75]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"findOne","range":[16,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"called","range":[24,30]},{"type":{"label":","},"range":[30,31]},{"type":{"label":"string"},"value":"findOne (user) should be called on model","range":[32,74]},{"type":{"label":")"},"range":[74,75]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne (user) should be called on model');
  t.true(_rec17._expr(_rec17._capt(_rec17._capt(_rec17._capt(UserStub, 'arguments/0/object/object').findOne, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(UserStub.findOne.calledOnce, \'findOne (user) should be called twice\')',
    filepath: 'tests/appointment-tests.js',
    line: 187,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"findOne","range":[16,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"calledOnce","range":[24,34]},"computed":false,"range":[7,34]},{"type":"StringLiteral","value":"findOne (user) should be called twice","range":[36,75]}],"range":[0,76]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"findOne","range":[16,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"calledOnce","range":[24,34]},{"type":{"label":","},"range":[34,35]},{"type":{"label":"string"},"value":"findOne (user) should be called twice","range":[36,75]},{"type":{"label":")"},"range":[75,76]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne (user) should be called twice');
  t.true(_rec18._expr(_rec18._capt(_rec18._capt(_rec18._capt(UserStub, 'arguments/0/callee/object/object').findOne, 'arguments/0/callee/object').calledWith(_rec18._capt(ccidArgs, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(UserStub.findOne.calledWith(ccidArgs), \'findOne (user) should be called with ccid args\')',
    filepath: 'tests/appointment-tests.js',
    line: 188,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"findOne","range":[16,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"calledWith","range":[24,34]},"computed":false,"range":[7,34]},"arguments":[{"type":"Identifier","name":"ccidArgs","range":[35,43]}],"range":[7,44]},{"type":"StringLiteral","value":"findOne (user) should be called with ccid args","range":[46,94]}],"range":[0,95]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"findOne","range":[16,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"calledWith","range":[24,34]},{"type":{"label":"("},"range":[34,35]},{"type":{"label":"name"},"value":"ccidArgs","range":[35,43]},{"type":{"label":")"},"range":[43,44]},{"type":{"label":","},"range":[44,45]},{"type":{"label":"string"},"value":"findOne (user) should be called with ccid args","range":[46,94]},{"type":{"label":")"},"range":[94,95]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne (user) should be called with ccid args');

  // Luego buscamos la cita (que ya existe)
  t.true(_rec19._expr(_rec19._capt(_rec19._capt(_rec19._capt(AppointmentStub, 'arguments/0/object/object').findOne, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AppointmentStub.findOne.called, \'findOne (appoint) should be called on model\')',
    filepath: 'tests/appointment-tests.js',
    line: 191,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"findOne","range":[23,30]},"computed":false,"range":[7,30]},"property":{"type":"Identifier","name":"called","range":[31,37]},"computed":false,"range":[7,37]},{"type":"StringLiteral","value":"findOne (appoint) should be called on model","range":[39,84]}],"range":[0,85]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"findOne","range":[23,30]},{"type":{"label":"."},"range":[30,31]},{"type":{"label":"name"},"value":"called","range":[31,37]},{"type":{"label":","},"range":[37,38]},{"type":{"label":"string"},"value":"findOne (appoint) should be called on model","range":[39,84]},{"type":{"label":")"},"range":[84,85]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne (appoint) should be called on model');
  t.true(_rec20._expr(_rec20._capt(_rec20._capt(_rec20._capt(AppointmentStub, 'arguments/0/object/object').findOne, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(AppointmentStub.findOne.calledOnce, \'findOne (appoint) should be called twice\')',
    filepath: 'tests/appointment-tests.js',
    line: 192,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"findOne","range":[23,30]},"computed":false,"range":[7,30]},"property":{"type":"Identifier","name":"calledOnce","range":[31,41]},"computed":false,"range":[7,41]},{"type":"StringLiteral","value":"findOne (appoint) should be called twice","range":[43,85]}],"range":[0,86]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"findOne","range":[23,30]},{"type":{"label":"."},"range":[30,31]},{"type":{"label":"name"},"value":"calledOnce","range":[31,41]},{"type":{"label":","},"range":[41,42]},{"type":{"label":"string"},"value":"findOne (appoint) should be called twice","range":[43,85]},{"type":{"label":")"},"range":[85,86]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne (appoint) should be called twice');
  t.true(_rec21._expr(_rec21._capt(_rec21._capt(_rec21._capt(AppointmentStub, 'arguments/0/callee/object/object').findOne, 'arguments/0/callee/object').calledWith(_rec21._capt(vArgs, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(AppointmentStub.findOne.calledWith(vArgs), \'findOne (appoint) should be called with vargs\')',
    filepath: 'tests/appointment-tests.js',
    line: 193,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"findOne","range":[23,30]},"computed":false,"range":[7,30]},"property":{"type":"Identifier","name":"calledWith","range":[31,41]},"computed":false,"range":[7,41]},"arguments":[{"type":"Identifier","name":"vArgs","range":[42,47]}],"range":[7,48]},{"type":"StringLiteral","value":"findOne (appoint) should be called with vargs","range":[50,97]}],"range":[0,98]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"findOne","range":[23,30]},{"type":{"label":"."},"range":[30,31]},{"type":{"label":"name"},"value":"calledWith","range":[31,41]},{"type":{"label":"("},"range":[41,42]},{"type":{"label":"name"},"value":"vArgs","range":[42,47]},{"type":{"label":")"},"range":[47,48]},{"type":{"label":","},"range":[48,49]},{"type":{"label":"string"},"value":"findOne (appoint) should be called with vargs","range":[50,97]},{"type":{"label":")"},"range":[97,98]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne (appoint) should be called with vargs');

  // Volvemos a buscarlas por el id
  t.true(_rec22._expr(_rec22._capt(_rec22._capt(_rec22._capt(AppointmentStub, 'arguments/0/object/object').findById, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AppointmentStub.findById.called, \'findById (appoint) should be called on model\')',
    filepath: 'tests/appointment-tests.js',
    line: 196,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"findById","range":[23,31]},"computed":false,"range":[7,31]},"property":{"type":"Identifier","name":"called","range":[32,38]},"computed":false,"range":[7,38]},{"type":"StringLiteral","value":"findById (appoint) should be called on model","range":[40,86]}],"range":[0,87]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"findById","range":[23,31]},{"type":{"label":"."},"range":[31,32]},{"type":{"label":"name"},"value":"called","range":[32,38]},{"type":{"label":","},"range":[38,39]},{"type":{"label":"string"},"value":"findById (appoint) should be called on model","range":[40,86]},{"type":{"label":")"},"range":[86,87]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findById (appoint) should be called on model');
  t.true(_rec23._expr(_rec23._capt(_rec23._capt(_rec23._capt(AppointmentStub, 'arguments/0/object/object').findById, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(AppointmentStub.findById.calledOnce, \'findById (appoint) should be called twice\')',
    filepath: 'tests/appointment-tests.js',
    line: 197,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"findById","range":[23,31]},"computed":false,"range":[7,31]},"property":{"type":"Identifier","name":"calledOnce","range":[32,42]},"computed":false,"range":[7,42]},{"type":"StringLiteral","value":"findById (appoint) should be called twice","range":[44,87]}],"range":[0,88]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"findById","range":[23,31]},{"type":{"label":"."},"range":[31,32]},{"type":{"label":"name"},"value":"calledOnce","range":[32,42]},{"type":{"label":","},"range":[42,43]},{"type":{"label":"string"},"value":"findById (appoint) should be called twice","range":[44,87]},{"type":{"label":")"},"range":[87,88]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findById (appoint) should be called twice');
  t.true(_rec24._expr(_rec24._capt(_rec24._capt(_rec24._capt(AppointmentStub, 'arguments/0/callee/object/object').findById, 'arguments/0/callee/object').calledWith(_rec24._capt(_rec24._capt(oneAppointment, 'arguments/0/arguments/0/object').id, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(AppointmentStub.findById.calledWith(oneAppointment.id), \'findById (appoint) should be called with vargs\')',
    filepath: 'tests/appointment-tests.js',
    line: 198,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"findById","range":[23,31]},"computed":false,"range":[7,31]},"property":{"type":"Identifier","name":"calledWith","range":[32,42]},"computed":false,"range":[7,42]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"oneAppointment","range":[43,57]},"property":{"type":"Identifier","name":"id","range":[58,60]},"computed":false,"range":[43,60]}],"range":[7,61]},{"type":"StringLiteral","value":"findById (appoint) should be called with vargs","range":[63,111]}],"range":[0,112]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"findById","range":[23,31]},{"type":{"label":"."},"range":[31,32]},{"type":{"label":"name"},"value":"calledWith","range":[32,42]},{"type":{"label":"("},"range":[42,43]},{"type":{"label":"name"},"value":"oneAppointment","range":[43,57]},{"type":{"label":"."},"range":[57,58]},{"type":{"label":"name"},"value":"id","range":[58,60]},{"type":{"label":")"},"range":[60,61]},{"type":{"label":","},"range":[61,62]},{"type":{"label":"string"},"value":"findById (appoint) should be called with vargs","range":[63,111]},{"type":{"label":")"},"range":[111,112]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findById (appoint) should be called with vargs');

  // Al encontrarla, la actualizamos
  t.true(_rec25._expr(_rec25._capt(_rec25._capt(_rec25._capt(AppointmentStub, 'arguments/0/object/object').update, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AppointmentStub.update.called, \'appointment.update called on model\')',
    filepath: 'tests/appointment-tests.js',
    line: 201,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"update","range":[23,29]},"computed":false,"range":[7,29]},"property":{"type":"Identifier","name":"called","range":[30,36]},"computed":false,"range":[7,36]},{"type":"StringLiteral","value":"appointment.update called on model","range":[38,74]}],"range":[0,75]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"update","range":[23,29]},{"type":{"label":"."},"range":[29,30]},{"type":{"label":"name"},"value":"called","range":[30,36]},{"type":{"label":","},"range":[36,37]},{"type":{"label":"string"},"value":"appointment.update called on model","range":[38,74]},{"type":{"label":")"},"range":[74,75]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'appointment.update called on model');
  t.true(_rec26._expr(_rec26._capt(_rec26._capt(_rec26._capt(AppointmentStub, 'arguments/0/object/object').update, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(AppointmentStub.update.calledOnce, \'appointment.update should be called once\')',
    filepath: 'tests/appointment-tests.js',
    line: 202,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"update","range":[23,29]},"computed":false,"range":[7,29]},"property":{"type":"Identifier","name":"calledOnce","range":[30,40]},"computed":false,"range":[7,40]},{"type":"StringLiteral","value":"appointment.update should be called once","range":[42,84]}],"range":[0,85]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"update","range":[23,29]},{"type":{"label":"."},"range":[29,30]},{"type":{"label":"name"},"value":"calledOnce","range":[30,40]},{"type":{"label":","},"range":[40,41]},{"type":{"label":"string"},"value":"appointment.update should be called once","range":[42,84]},{"type":{"label":")"},"range":[84,85]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'appointment.update should be called once');
  t.true(_rec27._expr(_rec27._capt(_rec27._capt(_rec27._capt(AppointmentStub, 'arguments/0/callee/object/object').update, 'arguments/0/callee/object').calledWith(_rec27._capt(oneAppointment, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(AppointmentStub.update.calledWith(oneAppointment), \'appointment.update should be called with specified args\')',
    filepath: 'tests/appointment-tests.js',
    line: 203,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"update","range":[23,29]},"computed":false,"range":[7,29]},"property":{"type":"Identifier","name":"calledWith","range":[30,40]},"computed":false,"range":[7,40]},"arguments":[{"type":"Identifier","name":"oneAppointment","range":[41,55]}],"range":[7,56]},{"type":"StringLiteral","value":"appointment.update should be called with specified args","range":[58,115]}],"range":[0,116]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"update","range":[23,29]},{"type":{"label":"."},"range":[29,30]},{"type":{"label":"name"},"value":"calledWith","range":[30,40]},{"type":{"label":"("},"range":[40,41]},{"type":{"label":"name"},"value":"oneAppointment","range":[41,55]},{"type":{"label":")"},"range":[55,56]},{"type":{"label":","},"range":[56,57]},{"type":{"label":"string"},"value":"appointment.update should be called with specified args","range":[58,115]},{"type":{"label":")"},"range":[115,116]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'appointment.update should be called with specified args');

  t.deepEqual(appointment, oneAppointment, 'appointment should be the same');
});

test.serial('Appointment#findNoAssignedByDate', async t => {
  var _rec28 = new _powerAssertRecorder(),
      _rec29 = new _powerAssertRecorder(),
      _rec30 = new _powerAssertRecorder();

  let appointments = await db.Appointment.findNoAssignedByDate(dayinit, dayend);

  // Buscamos con un alll
  t.true(_rec28._expr(_rec28._capt(_rec28._capt(_rec28._capt(AppointmentStub, 'arguments/0/object/object').findAll, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AppointmentStub.findAll.called, \'findOne should be called on model\')',
    filepath: 'tests/appointment-tests.js',
    line: 212,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"findAll","range":[23,30]},"computed":false,"range":[7,30]},"property":{"type":"Identifier","name":"called","range":[31,37]},"computed":false,"range":[7,37]},{"type":"StringLiteral","value":"findOne should be called on model","range":[39,74]}],"range":[0,75]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"findAll","range":[23,30]},{"type":{"label":"."},"range":[30,31]},{"type":{"label":"name"},"value":"called","range":[31,37]},{"type":{"label":","},"range":[37,38]},{"type":{"label":"string"},"value":"findOne should be called on model","range":[39,74]},{"type":{"label":")"},"range":[74,75]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called on model');
  t.true(_rec29._expr(_rec29._capt(_rec29._capt(_rec29._capt(AppointmentStub, 'arguments/0/object/object').findAll, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(AppointmentStub.findAll.calledOnce, \'findOne should be called twice\')',
    filepath: 'tests/appointment-tests.js',
    line: 213,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"findAll","range":[23,30]},"computed":false,"range":[7,30]},"property":{"type":"Identifier","name":"calledOnce","range":[31,41]},"computed":false,"range":[7,41]},{"type":"StringLiteral","value":"findOne should be called twice","range":[43,75]}],"range":[0,76]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"findAll","range":[23,30]},{"type":{"label":"."},"range":[30,31]},{"type":{"label":"name"},"value":"calledOnce","range":[31,41]},{"type":{"label":","},"range":[41,42]},{"type":{"label":"string"},"value":"findOne should be called twice","range":[43,75]},{"type":{"label":")"},"range":[75,76]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called twice');
  t.true(_rec30._expr(_rec30._capt(_rec30._capt(_rec30._capt(AppointmentStub, 'arguments/0/callee/object/object').findAll, 'arguments/0/callee/object').calledWith(_rec30._capt(daysArgs, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(AppointmentStub.findAll.calledWith(daysArgs), \'findOne should be called with ccid args\')',
    filepath: 'tests/appointment-tests.js',
    line: 214,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"findAll","range":[23,30]},"computed":false,"range":[7,30]},"property":{"type":"Identifier","name":"calledWith","range":[31,41]},"computed":false,"range":[7,41]},"arguments":[{"type":"Identifier","name":"daysArgs","range":[42,50]}],"range":[7,51]},{"type":"StringLiteral","value":"findOne should be called with ccid args","range":[53,94]}],"range":[0,95]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"findAll","range":[23,30]},{"type":{"label":"."},"range":[30,31]},{"type":{"label":"name"},"value":"calledWith","range":[31,41]},{"type":{"label":"("},"range":[41,42]},{"type":{"label":"name"},"value":"daysArgs","range":[42,50]},{"type":{"label":")"},"range":[50,51]},{"type":{"label":","},"range":[51,52]},{"type":{"label":"string"},"value":"findOne should be called with ccid args","range":[53,94]},{"type":{"label":")"},"range":[94,95]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called with ccid args');

  t.is(appointments.length, appointmentFixtures.bydays(dayinit, dayend).length, 'agents should be the same amount');
  t.deepEqual(appointments, appointmentFixtures.bydays(dayinit, dayend), 'agents should be the same');
});

test.serial('Appointmet#AssignedAndUpdate - exist - user - customer', async t => {
  var _rec31 = new _powerAssertRecorder(),
      _rec32 = new _powerAssertRecorder(),
      _rec33 = new _powerAssertRecorder(),
      _rec34 = new _powerAssertRecorder(),
      _rec35 = new _powerAssertRecorder(),
      _rec36 = new _powerAssertRecorder(),
      _rec37 = new _powerAssertRecorder(),
      _rec38 = new _powerAssertRecorder();

  let appointmentup = await db.Appointment.assignedAndUpdate(ccidchange, changeAppointment.id);

  // Primero buscamos el usuario
  t.true(_rec31._expr(_rec31._capt(_rec31._capt(_rec31._capt(UserStub, 'arguments/0/object/object').findOne, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(UserStub.findOne.called, \'findOne (user) should be called on model\')',
    filepath: 'tests/appointment-tests.js',
    line: 224,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"findOne","range":[16,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"called","range":[24,30]},"computed":false,"range":[7,30]},{"type":"StringLiteral","value":"findOne (user) should be called on model","range":[32,74]}],"range":[0,75]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"findOne","range":[16,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"called","range":[24,30]},{"type":{"label":","},"range":[30,31]},{"type":{"label":"string"},"value":"findOne (user) should be called on model","range":[32,74]},{"type":{"label":")"},"range":[74,75]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne (user) should be called on model');
  t.true(_rec32._expr(_rec32._capt(_rec32._capt(_rec32._capt(UserStub, 'arguments/0/object/object').findOne, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(UserStub.findOne.calledOnce, \'findOne (user) should be called twice\')',
    filepath: 'tests/appointment-tests.js',
    line: 225,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"findOne","range":[16,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"calledOnce","range":[24,34]},"computed":false,"range":[7,34]},{"type":"StringLiteral","value":"findOne (user) should be called twice","range":[36,75]}],"range":[0,76]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"findOne","range":[16,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"calledOnce","range":[24,34]},{"type":{"label":","},"range":[34,35]},{"type":{"label":"string"},"value":"findOne (user) should be called twice","range":[36,75]},{"type":{"label":")"},"range":[75,76]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne (user) should be called twice');
  t.true(_rec33._expr(_rec33._capt(_rec33._capt(_rec33._capt(UserStub, 'arguments/0/callee/object/object').findOne, 'arguments/0/callee/object').calledWith(_rec33._capt(ccidArgsCustomer, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(UserStub.findOne.calledWith(ccidArgsCustomer), \'findOne (user) should be called with ccid args\')',
    filepath: 'tests/appointment-tests.js',
    line: 226,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"UserStub","range":[7,15]},"property":{"type":"Identifier","name":"findOne","range":[16,23]},"computed":false,"range":[7,23]},"property":{"type":"Identifier","name":"calledWith","range":[24,34]},"computed":false,"range":[7,34]},"arguments":[{"type":"Identifier","name":"ccidArgsCustomer","range":[35,51]}],"range":[7,52]},{"type":"StringLiteral","value":"findOne (user) should be called with ccid args","range":[54,102]}],"range":[0,103]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"UserStub","range":[7,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"findOne","range":[16,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"calledWith","range":[24,34]},{"type":{"label":"("},"range":[34,35]},{"type":{"label":"name"},"value":"ccidArgsCustomer","range":[35,51]},{"type":{"label":")"},"range":[51,52]},{"type":{"label":","},"range":[52,53]},{"type":{"label":"string"},"value":"findOne (user) should be called with ccid args","range":[54,102]},{"type":{"label":")"},"range":[102,103]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne (user) should be called with ccid args');

  // Volvemos a buscarlas por el id
  t.true(_rec34._expr(_rec34._capt(_rec34._capt(_rec34._capt(AppointmentStub, 'arguments/0/object/object').findById, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AppointmentStub.findById.called, \'findById (appoint) should be called on model\')',
    filepath: 'tests/appointment-tests.js',
    line: 229,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"findById","range":[23,31]},"computed":false,"range":[7,31]},"property":{"type":"Identifier","name":"called","range":[32,38]},"computed":false,"range":[7,38]},{"type":"StringLiteral","value":"findById (appoint) should be called on model","range":[40,86]}],"range":[0,87]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"findById","range":[23,31]},{"type":{"label":"."},"range":[31,32]},{"type":{"label":"name"},"value":"called","range":[32,38]},{"type":{"label":","},"range":[38,39]},{"type":{"label":"string"},"value":"findById (appoint) should be called on model","range":[40,86]},{"type":{"label":")"},"range":[86,87]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findById (appoint) should be called on model');
  t.true(_rec35._expr(_rec35._capt(_rec35._capt(_rec35._capt(AppointmentStub, 'arguments/0/object/object').findById, 'arguments/0/object').calledTwice, 'arguments/0'), {
    content: 't.true(AppointmentStub.findById.calledTwice, \'findById (appoint) should be called twice\')',
    filepath: 'tests/appointment-tests.js',
    line: 230,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"findById","range":[23,31]},"computed":false,"range":[7,31]},"property":{"type":"Identifier","name":"calledTwice","range":[32,43]},"computed":false,"range":[7,43]},{"type":"StringLiteral","value":"findById (appoint) should be called twice","range":[45,88]}],"range":[0,89]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"findById","range":[23,31]},{"type":{"label":"."},"range":[31,32]},{"type":{"label":"name"},"value":"calledTwice","range":[32,43]},{"type":{"label":","},"range":[43,44]},{"type":{"label":"string"},"value":"findById (appoint) should be called twice","range":[45,88]},{"type":{"label":")"},"range":[88,89]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findById (appoint) should be called twice');
  t.true(_rec36._expr(_rec36._capt(_rec36._capt(_rec36._capt(AppointmentStub, 'arguments/0/callee/object/object').findById, 'arguments/0/callee/object').calledWith(_rec36._capt(_rec36._capt(changeAppointment, 'arguments/0/arguments/0/object').id, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(AppointmentStub.findById.calledWith(changeAppointment.id), \'findById (appoint) should be called with vargs\')',
    filepath: 'tests/appointment-tests.js',
    line: 231,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"findById","range":[23,31]},"computed":false,"range":[7,31]},"property":{"type":"Identifier","name":"calledWith","range":[32,42]},"computed":false,"range":[7,42]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"changeAppointment","range":[43,60]},"property":{"type":"Identifier","name":"id","range":[61,63]},"computed":false,"range":[43,63]}],"range":[7,64]},{"type":"StringLiteral","value":"findById (appoint) should be called with vargs","range":[66,114]}],"range":[0,115]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"findById","range":[23,31]},{"type":{"label":"."},"range":[31,32]},{"type":{"label":"name"},"value":"calledWith","range":[32,42]},{"type":{"label":"("},"range":[42,43]},{"type":{"label":"name"},"value":"changeAppointment","range":[43,60]},{"type":{"label":"."},"range":[60,61]},{"type":{"label":"name"},"value":"id","range":[61,63]},{"type":{"label":")"},"range":[63,64]},{"type":{"label":","},"range":[64,65]},{"type":{"label":"string"},"value":"findById (appoint) should be called with vargs","range":[66,114]},{"type":{"label":")"},"range":[114,115]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findById (appoint) should be called with vargs');

  //console.log('El total de los usuario es: ' +  JSON.stringify(appointmentFixtures.extend(oneAppointment,
  //  assign)) + '\n\n')

  // Al encontrarla, la actualizamos
  t.true(_rec37._expr(_rec37._capt(_rec37._capt(_rec37._capt(AppointmentStub, 'arguments/0/object/object').update, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AppointmentStub.update.called, \'appointment.update called on model\')',
    filepath: 'tests/appointment-tests.js',
    line: 237,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"update","range":[23,29]},"computed":false,"range":[7,29]},"property":{"type":"Identifier","name":"called","range":[30,36]},"computed":false,"range":[7,36]},{"type":"StringLiteral","value":"appointment.update called on model","range":[38,74]}],"range":[0,75]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"update","range":[23,29]},{"type":{"label":"."},"range":[29,30]},{"type":{"label":"name"},"value":"called","range":[30,36]},{"type":{"label":","},"range":[36,37]},{"type":{"label":"string"},"value":"appointment.update called on model","range":[38,74]},{"type":{"label":")"},"range":[74,75]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'appointment.update called on model');
  t.true(_rec38._expr(_rec38._capt(_rec38._capt(_rec38._capt(AppointmentStub, 'arguments/0/object/object').update, 'arguments/0/object').calledOnce, 'arguments/0'), {
    content: 't.true(AppointmentStub.update.calledOnce, \'appointment.update should be called once\')',
    filepath: 'tests/appointment-tests.js',
    line: 238,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AppointmentStub","range":[7,22]},"property":{"type":"Identifier","name":"update","range":[23,29]},"computed":false,"range":[7,29]},"property":{"type":"Identifier","name":"calledOnce","range":[30,40]},"computed":false,"range":[7,40]},{"type":"StringLiteral","value":"appointment.update should be called once","range":[42,84]}],"range":[0,85]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AppointmentStub","range":[7,22]},{"type":{"label":"."},"range":[22,23]},{"type":{"label":"name"},"value":"update","range":[23,29]},{"type":{"label":"."},"range":[29,30]},{"type":{"label":"name"},"value":"calledOnce","range":[30,40]},{"type":{"label":","},"range":[40,41]},{"type":{"label":"string"},"value":"appointment.update should be called once","range":[42,84]},{"type":{"label":")"},"range":[84,85]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'appointment.update should be called once');
  //t.true(AppointmentStub.update.calledWith(changeAppointment,assign), 'appointment.update should be called with specified args')

  // t.deepEqual(appointmentup, appointmentFixtures.extend(oneAppointment, assign), 'appointment should be the same')
});
//# sourceMappingURL=/home/shersnape/Ceiba/Java-Script/Tutorial/JavaScritp-Platzi/smallJS/smallJS-dbsql/node_modules/.cache/ava/2174cfd6ada929bd08e80f6ec75dc418.js.map