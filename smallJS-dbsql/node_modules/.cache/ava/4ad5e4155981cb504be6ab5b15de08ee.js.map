{"version":3,"sources":["appointment-tests.js"],"names":["test","require","sinon","proxyquire","Sequelize","Op","appointmentFixtures","config","logging","UserStub","AppointmentStub","db","sandbox","customer","Object","assign","user","doctor","docuser","oneAppointment","oneapp","appointmentid","id","userid","ccid","vArgs","where","userId","ccidArgs","ccidArgsCustomer","type","newAppointment","day","hourinit","hourend","doctorname","branch","state","assignedid","assignedname","createdAt","Date","updatedAt","dayinit","dayend","daysArgs","lt","gt","name","beforeEach","createSandbox","hasMany","spy","belongsTo","create","stub","withArgs","returns","Promise","resolve","toJSON","update","extend","findById","byId","findOne","byrel","byCCid","byCCidCustomer","findAll","bydays","setupDatabase","afterEach","restore","t","truthy","Appointment","User","serial","true","called","calledWith","appointment","createOrUpdate","calledOnce","deepEqual","appointments","findNoAssignedByDate","is","length","assignedAndUpdate"],"mappings":"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","file":"appointment-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\nconst Sequelize = require('sequelize')\nconst Op = Sequelize.Op\n\nconst appointmentFixtures = require('./fixtures/appointment')\n\nlet config = {\n  logging() {}\n}\n\nlet UserStub = null\nlet AppointmentStub = null\nlet db = null\nlet sandbox = null\n\nlet customer = Object.assign({}, appointmentFixtures.user)\nlet doctor = Object.assign({}, appointmentFixtures.docuser)\nlet oneAppointment = Object.assign({}, appointmentFixtures.oneapp)\n\nlet appointmentid = oneAppointment.id\nlet userid = doctor.id\nlet ccid = doctor.ccid\n\nlet vArgs = {\n  where:{\n    id:oneAppointment.id,\n    userId:oneAppointment.userId\n  }\n}\n\nlet ccidArgs = {\n  where: { ccid }\n}\n\nlet ccidArgsCustomer = {\n  where: {\n    ccid:customer.ccid,\n    type:'customer'\n  }\n}\n\nlet newAppointment = {\n  id:5,\n  userId:2,\n  day: '2018-06-28',\n  hourinit: '8:00',\n  hourend:  '9:00',\n  doctorname: 'Pepito Pérez',\n  type: 'General',\n  branch:1,\n  state:1,\n  assignedid:0,\n  assignedname:'',\n  createdAt: new Date(),\n  updatedAt: new Date()\n  // operatorsAliases: false\n}\n\nlet dayinit = '2018-06-20'\nlet dayend = '2018-06-24'\n\n// UserStub = {\n//  hasMany: sinon.spy()\n// }\nlet daysArgs = {\n  where: {\n    day:{\n      [Op.lt]: dayinit,\n      [Op.gt]: dayend\n    },\n    state:1\n  }\n}\n\nlet assign = {assignedid: customer.ccid, assignedname: customer.name, state:2}\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n\n  UserStub = {\n    hasMany: sandbox.spy()\n  }\n\n  AppointmentStub = {\n    belongsTo: sandbox.spy()\n  }\n\n  // Model create and update Stub\n  AppointmentStub.create = sandbox.stub()\n  AppointmentStub.create.withArgs(newAppointment).returns(Promise.resolve({\n    toJSON() { return newAppointment }\n  }))\n\n  AppointmentStub.update = sandbox.stub()\n  AppointmentStub.update.withArgs(oneAppointment).returns(Promise.resolve(oneAppointment))\n  AppointmentStub.update.withArgs(oneAppointment, assign).returns(Promise.resolve(appointmentFixtures.extend(oneAppointment,\n   assign)))\n\n  AppointmentStub.findById = sandbox.stub()\n  AppointmentStub.findById.withArgs(oneAppointment.id).returns(Promise.resolve(appointmentFixtures.byId(oneAppointment.id)))\n\n  // Model findOne Stub (with ccid)\n  AppointmentStub.findOne = sandbox.stub()\n  AppointmentStub.findOne.withArgs(vArgs).returns(Promise.resolve(appointmentFixtures.byrel(appointmentid, userid)))\n\n  // Model findOne Stub (with ccid)\n  UserStub.findOne = sandbox.stub()\n  UserStub.findOne.withArgs(ccidArgs).returns(Promise.resolve(appointmentFixtures.byCCid(ccid)))\n  UserStub.findOne.withArgs(ccidArgsCustomer).returns(Promise.resolve(appointmentFixtures.byCCidCustomer(ccid)))\n\n  AppointmentStub.findAll = sandbox.stub()\n  AppointmentStub.findAll.withArgs(daysArgs).returns(Promise.resolve(appointmentFixtures.bydays(dayinit, dayend)))\n\n  // Model findById Stub\n  // UserStub.findById = sandbox.stub()\n  // UserStub.findById.withArgs(id).returns(Promise.resolve(userFixtures.byId(id))) */\n\n  const setupDatabase = proxyquire('../', {\n    './models/user': () => UserStub,\n    './models/appointment': () => AppointmentStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('Appointment', t => {\n  t.truthy(db.Appointment, 'Appointment service should exist')\n})\n\ntest('User', t => {\n  t.truthy(db.User, 'User service should exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(UserStub.hasMany.called, 'UserModel.hasMany was executed')\n  t.true(UserStub.hasMany.calledWith(AppointmentStub), 'Argument should be the AppointmentModel')\n  t.true(AppointmentStub.belongsTo.called, 'AppointmentModel.belongsTo was executed')\n  t.true(AppointmentStub.belongsTo.calledWith(UserStub), 'Argument should be the UserModel')\n})\n\ntest.serial('Appointmet#createOrUpdate - new - user - doctor', async t => {\n  let appointment = await db.Appointment.createOrUpdate(ccid, newAppointment)\n\n  // Primero buscamos el usuario\n  t.true(UserStub.findOne.called, 'findOne (user) should be called on model')\n  t.true(UserStub.findOne.calledOnce, 'findOne (user) should be called twice')\n  t.true(UserStub.findOne.calledWith(ccidArgs), 'findOne (user) should be called with ccid args')\n\n  // Luego buscamos la cita\n  t.true(AppointmentStub.findOne.called, 'findOne (appoint) should be called on model')\n  t.true(AppointmentStub.findOne.calledOnce, 'findOne (appoint) should be called once')\n  t.true(AppointmentStub.findOne.calledWith({\n    where:{\n      id:newAppointment.id,\n      userId:newAppointment.userId\n    }\n  }), 'findOne (appoint) should be called with vargs')\n\n  // Luego creamos la cita\n  t.true(AppointmentStub.create.called, 'appointment.create called on model')\n  t.true(AppointmentStub.create.calledOnce, 'appointment.create should be called once')\n  t.true(AppointmentStub.create.calledWith(newAppointment), 'appointment.create should be called with specified args')\n  t.deepEqual(appointment, newAppointment, 'appointment should be the same')\n})\n\ntest.serial('Appointmet#createOrUpdate - exist - user - doctor', async t => {\n  let appointment = await db.Appointment.createOrUpdate(ccid, oneAppointment)\n\n  // Primero buscamos el usuario\n  t.true(UserStub.findOne.called, 'findOne (user) should be called on model')\n  t.true(UserStub.findOne.calledOnce, 'findOne (user) should be called twice')\n  t.true(UserStub.findOne.calledWith(ccidArgs), 'findOne (user) should be called with ccid args')\n\n  // Luego buscamos la cita (que ya existe)\n  t.true(AppointmentStub.findOne.called, 'findOne (appoint) should be called on model')\n  t.true(AppointmentStub.findOne.calledOnce, 'findOne (appoint) should be called twice')\n  t.true(AppointmentStub.findOne.calledWith(vArgs), 'findOne (appoint) should be called with vargs')\n\n  // Volvemos a buscarlas por el id\n  t.true(AppointmentStub.findById.called, 'findById (appoint) should be called on model')\n  t.true(AppointmentStub.findById.calledOnce, 'findById (appoint) should be called twice')\n  t.true(AppointmentStub.findById.calledWith(oneAppointment.id), 'findById (appoint) should be called with vargs')\n\n  // Al encontrarla, la actualizamos\n  t.true(AppointmentStub.update.called, 'appointment.update called on model')\n  t.true(AppointmentStub.update.calledOnce, 'appointment.update should be called once')\n  t.true(AppointmentStub.update.calledWith(oneAppointment), 'appointment.update should be called with specified args')\n\n  t.deepEqual(appointment, oneAppointment, 'appointment should be the same')\n})\n\ntest.serial('Appointment#findNoAssignedByDate', async t => {\n  let appointments = await db.Appointment.findNoAssignedByDate(dayinit, dayend)\n\n  // Buscamos con un alll\n  t.true(AppointmentStub.findAll.called, 'findOne should be called on model')\n  t.true(AppointmentStub.findAll.calledOnce, 'findOne should be called twice')\n  t.true(AppointmentStub.findAll.calledWith(daysArgs), 'findOne should be called with ccid args')\n\n  t.is(appointments.length, appointmentFixtures.bydays(dayinit, dayend).length, 'agents should be the same amount')\n  t.deepEqual(appointments, appointmentFixtures.bydays(dayinit, dayend), 'agents should be the same')\n})\n\ntest.serial('Appointmet#AssignedAndUpdate - exist - user - customer', async t => {\n  let appointment = await db.Appointment.assignedAndUpdate(customer.ccid, oneAppointment)\n\n  // Primero buscamos el usuario\n  t.true(UserStub.findOne.called, 'findOne (user) should be called on model')\n  t.true(UserStub.findOne.calledOnce, 'findOne (user) should be called twice')\n  t.true(UserStub.findOne.calledWith(ccidArgsCustomer), 'findOne (user) should be called with ccid args')\n\n  // Luego buscamos la cita (que ya existe)\n  // t.true(AppointmentStub.findOne.called, 'findOne (appoint) should be called on model')\n  // t.true(AppointmentStub.findOne.calledOnce, 'findOne (appoint) should be called twice')\n  // t.true(AppointmentStub.findOne.calledWith(vArgs), 'findOne (appoint) should be called with vargs')\n\n  // Volvemos a buscarlas por el id\n  t.true(AppointmentStub.findById.called, 'findById (appoint) should be called on model')\n  t.true(AppointmentStub.findById.calledOnce, 'findById (appoint) should be called twice')\n  t.true(AppointmentStub.findById.calledWith(oneAppointment.id), 'findById (appoint) should be called with vargs')\n\n  // Al encontrarla, la actualizamos\n  t.true(AppointmentStub.update.called, 'appointment.update called on model')\n  t.true(AppointmentStub.update.calledOnce, 'appointment.update should be called once')\n  t.true(AppointmentStub.update.calledWith(oneAppointment, assign), 'appointment.update should be called with specified args')\n\n  // t.deepEqual(appointment, oneAppointment, 'appointment should be the same')\n})\n"]}