'use strict';

const test = require('ava');
const sinon = require('sinon');
const proxyquire = require('proxyquire');

const appointmentFixtures = require('./fixtures/appointment');
let config = {
  logging() {}
};

let id = 1;
let ccid = 10;
let UserStub = null;
let AppointmentStub = null;
let db = null;
let sandbox = null;

let doctor = Object.assign({}, appointmentFixtures.docuser);
let single = Object.assign({}, appointmentFixtures.single);

let ccidArgs = {
  where: { ccid }
};

let newAppointment = {
  day: '2018-06-28',
  hourinit: '8:00',
  hourend: '9:00',
  doctorname: 'Pepito PÃ©rez',
  type: 'General',
  branch: 1,
  state: 1,
  assignedid: 0,
  assignedname: '',
  createdAt: new Date(),
  updatedAt: new Date()
  // operatorsAliases: false
};

test.beforeEach(async () => {
  sandbox = sinon.createSandbox();

  UserStub = {
    hasMany: sandbox.spy()
  };

  AppointmentStub = {
    belongsTo: sinon.spy()

    // Model create Stub
  };AppointmentStub.create = sandbox.stub();
  UserStub.create.withArgs(newAppointment).returns(Promise.resolve({
    toJSON() {
      return newAppointment;
    }
  }));

  // Model update Stub
  /* UserStub.update = sandbox.stub()
  UserStub.update.withArgs(single, ccidArgs).returns(Promise.resolve(single))
   // Model findOne Stub (with ccid)
  UserStub.findOne = sandbox.stub()
  UserStub.findOne.withArgs(ccidArgs).returns(Promise.resolve(userFixtures.byCCid(ccid)))
   // Model findById Stub
  UserStub.findById = sandbox.stub()
  UserStub.findById.withArgs(id).returns(Promise.resolve(userFixtures.byId(id))) */

  const setupDatabase = proxyquire('../', {
    './models/user': () => UserStub,
    './models/appointment': () => AppointmentStub
  });

  db = await setupDatabase(config);
});
//# sourceMappingURL=/home/shersnape/Ceiba/Java-Script/Tutorial/JavaScritp-Platzi/smallJS/smallJS-dbsql/node_modules/.cache/ava/55e1450bafc92543a54b3d1d2e4376d3.js.map