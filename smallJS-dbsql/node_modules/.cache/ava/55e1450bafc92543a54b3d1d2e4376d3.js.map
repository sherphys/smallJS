{"version":3,"sources":["appointment-tests.js"],"names":["test","require","sinon","proxyquire","appointmentFixtures","config","logging","id","ccid","UserStub","AppointmentStub","db","sandbox","doctor","Object","assign","docuser","single","ccidArgs","where","newAppointment","day","hourinit","hourend","doctorname","type","branch","state","assignedid","assignedname","createdAt","Date","updatedAt","beforeEach","createSandbox","hasMany","spy","belongsTo","create","stub","withArgs","returns","Promise","resolve","toJSON","setupDatabase"],"mappings":"AAAA;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA,MAAMG,sBAAsBH,QAAQ,wBAAR,CAA5B;AACA,IAAII,SAAS;AACXC,YAAU,CAAE;AADD,CAAb;;AAIA,IAAIC,KAAK,CAAT;AACA,IAAIC,OAAO,EAAX;AACA,IAAIC,WAAW,IAAf;AACA,IAAIC,kBAAkB,IAAtB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEA,IAAIC,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBX,oBAAoBY,OAAtC,CAAb;AACA,IAAIC,SAASH,OAAOC,MAAP,CAAc,EAAd,EAAkBX,oBAAoBa,MAAtC,CAAb;;AAEA,IAAIC,WAAW;AACbC,SAAO,EAAEX,IAAF;AADM,CAAf;;AAIA,IAAIY,iBAAiB;AACnBC,OAAK,YADc;AAEnBC,YAAU,MAFS;AAGnBC,WAAU,MAHS;AAInBC,cAAY,cAJO;AAKnBC,QAAM,SALa;AAMnBC,UAAO,CANY;AAOnBC,SAAM,CAPa;AAQnBC,cAAW,CARQ;AASnBC,gBAAa,EATM;AAUnBC,aAAW,IAAIC,IAAJ,EAVQ;AAWnBC,aAAW,IAAID,IAAJ;AACX;AAZmB,CAArB;;AAeA/B,KAAKiC,UAAL,CAAgB,YAAY;AAC1BrB,YAAUV,MAAMgC,aAAN,EAAV;;AAEAzB,aAAW;AACT0B,aAASvB,QAAQwB,GAAR;AADA,GAAX;;AAIA1B,oBAAkB;AAChB2B,eAAWnC,MAAMkC,GAAN;;AAGb;AAJkB,GAAlB,CAKA1B,gBAAgB4B,MAAhB,GAAyB1B,QAAQ2B,IAAR,EAAzB;AACA9B,WAAS6B,MAAT,CAAgBE,QAAhB,CAAyBpB,cAAzB,EAAyCqB,OAAzC,CAAiDC,QAAQC,OAAR,CAAgB;AAC/DC,aAAS;AAAE,aAAOxB,cAAP;AAAuB;AAD6B,GAAhB,CAAjD;;AAIA;AACA;;;;;;;;;AAWA,QAAMyB,gBAAgB1C,WAAW,KAAX,EAAkB;AACtC,qBAAiB,MAAMM,QADe;AAEtC,4BAAwB,MAAMC;AAFQ,GAAlB,CAAtB;;AAKAC,OAAK,MAAMkC,cAAcxC,MAAd,CAAX;AACD,CAnCD","file":"appointment-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst appointmentFixtures = require('./fixtures/appointment')\nlet config = {\n  logging() {}\n}\n\nlet id = 1\nlet ccid = 10\nlet UserStub = null\nlet AppointmentStub = null\nlet db = null\nlet sandbox = null\n\nlet doctor = Object.assign({}, appointmentFixtures.docuser)\nlet single = Object.assign({}, appointmentFixtures.single)\n\nlet ccidArgs = {\n  where: { ccid }\n}\n\nlet newAppointment = {\n  day: '2018-06-28',\n  hourinit: '8:00',\n  hourend:  '9:00',\n  doctorname: 'Pepito PÃ©rez',\n  type: 'General',\n  branch:1,\n  state:1,\n  assignedid:0,\n  assignedname:'',\n  createdAt: new Date(),\n  updatedAt: new Date()\n  // operatorsAliases: false\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n\n  UserStub = {\n    hasMany: sandbox.spy()\n  }\n\n  AppointmentStub = {\n    belongsTo: sinon.spy()\n  }\n\n  // Model create Stub\n  AppointmentStub.create = sandbox.stub()\n  UserStub.create.withArgs(newAppointment).returns(Promise.resolve({\n    toJSON() { return newAppointment }\n  }))\n\n  // Model update Stub\n  /* UserStub.update = sandbox.stub()\n  UserStub.update.withArgs(single, ccidArgs).returns(Promise.resolve(single))\n\n  // Model findOne Stub (with ccid)\n  UserStub.findOne = sandbox.stub()\n  UserStub.findOne.withArgs(ccidArgs).returns(Promise.resolve(userFixtures.byCCid(ccid)))\n\n  // Model findById Stub\n  UserStub.findById = sandbox.stub()\n  UserStub.findById.withArgs(id).returns(Promise.resolve(userFixtures.byId(id))) */\n\n  const setupDatabase = proxyquire('../', {\n    './models/user': () => UserStub,\n    './models/appointment': () => AppointmentStub\n  })\n\n  db = await setupDatabase(config)\n})"]}