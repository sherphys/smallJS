'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareOpaqueType":["id","typeParameters","supertype"],"DeclareVariable":["id"],"DeclareExportDeclaration":["declaration","specifiers","source"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"OpaqueType":["id","typeParameters","impltype","supertype"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"ObjectTypeSpreadProperty":["argument"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

const test = require('ava');
const sinon = require('sinon');
const proxyquire = require('proxyquire');
const Sequelize = require('sequelize');
const Op = Sequelize.Op;

const userFixtures = require('./fixtures/user');
const appointmentFixtures = require('./fixtures/appointment');

let config = {
  logging() {}
};

let userid = 2;
let appointmentid = 5;
let ccid = 11;
let UserStub = null;
let AppointmentStub = null;
let db = null;
let sandbox = null;

let customer = Object.assign({}, appointmentFixtures.user);
let doctor = Object.assign({}, appointmentFixtures.docuser);
let oneapp = Object.assign({}, appointmentFixtures.oneapp);

let vArgs = {
  id: appointmentid,
  userId: userid
};
let ccidArgs = {
  where: { ccid }
};

let newAppointment = {
  id: appointmentid,
  userId: userid,
  day: '2018-06-28',
  hourinit: '8:00',
  hourend: '9:00',
  doctorname: 'Pepito PÃ©rez',
  type: 'General',
  branch: 1,
  state: 1,
  assignedid: 0,
  assignedname: '',
  createdAt: new Date(),
  updatedAt: new Date()
  // operatorsAliases: false
};
let dayinit = '2018-06-20';
let dayend = '2018-06-24';

// UserStub = {
//  hasMany: sinon.spy()
// }
let daysArgs = {
  where: {
    day: {
      [Op.lt]: dayinit,
      [Op.gt]: dayend
    },
    state: 1
  }
};
test.beforeEach(async () => {
  sandbox = sinon.createSandbox();

  UserStub = {
    hasMany: sandbox.spy()
  };

  AppointmentStub = {
    belongsTo: sandbox.spy()

    // Model create and update Stub
  };AppointmentStub.create = sandbox.stub();
  AppointmentStub.create.withArgs(newAppointment).returns(Promise.resolve({
    toJSON() {
      return newAppointment;
    }
  }));

  // Model findOne Stub (with ccid)
  AppointmentStub.findOne = sandbox.stub();
  AppointmentStub.findOne.withArgs(vArgs).returns(Promise.resolve(appointmentFixtures.byrel(appointmentid, userid)));

  // Model findOne Stub (with ccid)
  UserStub.findOne = sandbox.stub();
  UserStub.findOne.withArgs(ccidArgs).returns(Promise.resolve(userFixtures.byCCid(ccid)));

  AppointmentStub.findAll = sandbox.stub();
  AppointmentStub.findAll.withArgs(daysArgs).returns(Promise.resolve(appointmentFixtures.bydays(dayinit, dayend)));

  // Model findById Stub
  // UserStub.findById = sandbox.stub()
  // UserStub.findById.withArgs(id).returns(Promise.resolve(userFixtures.byId(id))) */

  const setupDatabase = proxyquire('../', {
    './models/user': () => UserStub,
    './models/appointment': () => AppointmentStub
  });

  db = await setupDatabase(config);
});

test.afterEach(() => {
  sandbox && sandbox.restore();
});

test('Appointment', t => {
  var _rec = new _powerAssertRecorder();

  t.truthy(_rec._expr(_rec._capt(_rec._capt(db, 'arguments/0/object').Appointment, 'arguments/0'), {
    content: 't.truthy(db.Appointment, \'User service should exist\')',
    filepath: 'tests/appointment-tests.js',
    line: 112,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"db","range":[9,11]},"property":{"type":"Identifier","name":"Appointment","range":[12,23]},"computed":false,"range":[9,23]},{"type":"StringLiteral","value":"User service should exist","range":[25,52]}],"range":[0,53]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"db","range":[9,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"Appointment","range":[12,23]},{"type":{"label":","},"range":[23,24]},{"type":{"label":"string"},"value":"User service should exist","range":[25,52]},{"type":{"label":")"},"range":[52,53]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'User service should exist');
});

test('User', t => {
  var _rec2 = new _powerAssertRecorder();

  t.truthy(_rec2._expr(_rec2._capt(_rec2._capt(db, 'arguments/0/object').User, 'arguments/0'), {
    content: 't.truthy(db.User, \'User service should exist\')',
    filepath: 'tests/appointment-tests.js',
    line: 116,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"db","range":[9,11]},"property":{"type":"Identifier","name":"User","range":[12,16]},"computed":false,"range":[9,16]},{"type":"StringLiteral","value":"User service should exist","range":[18,45]}],"range":[0,46]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"db","range":[9,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"User","range":[12,16]},{"type":{"label":","},"range":[16,17]},{"type":{"label":"string"},"value":"User service should exist","range":[18,45]},{"type":{"label":")"},"range":[45,46]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'User service should exist');
});

/*test.serial('Setup', t => {
  t.true(UserStub.hasMany.called, 'UserModel.hasMany was executed')
  t.true(UserStub.hasMany.calledWith(AppointmentStub), 'Argument should be the ScheduleUserModel')
  t.true(AppointmentStub.belongsTo.called, 'SheduleUserModel.belongsTo was executed')
  t.true(AppointmentStub.belongsTo.calledWith(UserStub), 'Argument should be the UserModel')
})*/

/*test.serial('Appointmet#createOrUpdate - new - user - doctor', async t => {
  let appointment = await db.Appointment.createOrUpdate(ccid, newAppointment)

  // Primero buscamos el usuario
  t.true(UserStub.findOne.called, 'findOne should be called on model')
  t.true(UserStub.findOne.calledOnce, 'findOne should be called twice')
  t.true(UserStub.findOne.calledWith(ccidArgs), 'findOne should be called with ccid args')

  // Luego buscamos la cita
  t.true(AppointmentStub.findOne.called, 'findOne should be called on model')
  t.true(AppointmentStub.findOne.calledOnce, 'findOne should be called twice')
  t.true(AppointmentStub.findOne.calledWith(vArgs), 'findOne should be called with ccid args')

  // Luego creamos la cita
  t.true(AppointmentStub.create.called, 'agent.update called on model')
  t.true(AppointmentStub.create.calledOnce, 'agent.update should be called once')
  t.true(AppointmentStub.create.calledWith(newAppointment), 'agent.update should be called with specified args')
  t.deepEqual(appointment, newAppointment, 'agent should be the same')
})*/

/*test.serial('Appointment#findNoAssignedByDate', async t => {
  let appointments = await db.Appointment.findNoAssignedByDate(dayinit, dayend)

  // Buscamos con un alll
  t.true(AppointmentStub.findAll.called, 'findOne should be called on model')
  t.true(AppointmentStub.findAll.calledOnce, 'findOne should be called twice')
  t.true(AppointmentStub.findAll.calledWith(daysArgs), 'findOne should be called with ccid args')

  t.is(appointments.length, appointmentFixtures.bydays(dayinit,dayend).length, 'agents should be the same amount')
  t.deepEqual(appointments, appointmentFixtures.bydays(dayinit,dayend), 'agents should be the same')
})*/

/* test.serial('User#createOrUpdate - exists', async t => {
  let user = await db.User.createOrUpdate(single)

  t.true(UserStub.findOne.called, 'findOne should be called on model')
  t.true(UserStub.findOne.calledTwice, 'findOne should be called twice')
  // 2 Para el ccid
  t.true(UserStub.findOne.calledWith(ccidArgs), 'findOne should be called with ccid args')

  t.true(UserStub.update.called, 'agent.update called on model')
  t.true(UserStub.update.calledOnce, 'agent.update should be called once')
  t.true(UserStub.update.calledWith(single), 'agent.update should be called with specified args')
  t.deepEqual(user, single, 'agent should be the same')
}) */
//# sourceMappingURL=/home/shersnape/Ceiba/Java-Script/Tutorial/JavaScritp-Platzi/smallJS/smallJS-dbsql/node_modules/.cache/ava/77fa9b316e04dd29e39c0df3b5308c95.js.map