{"version":3,"sources":["appointment-tests.js"],"names":["test","require","sinon","proxyquire","appointmentFixtures","config","logging","id","ccid","UserStub","AppointmentStub","db","sandbox","doctor","Object","assign","docuser","single","ccidArgs","where","newAppointment","day","hourinit","hourend","doctorname","type","branch","state","assignedid","assignedname","createdAt","Date","updatedAt","t","truthy","Appointment"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA,MAAMG,sBAAsBH,QAAQ,wBAAR,CAA5B;AACA,IAAII,SAAS;AACXC,YAAU,CAAE;AADD,CAAb;;AAIA,IAAIC,KAAK,CAAT;AACA,IAAIC,OAAO,EAAX;AACA,IAAIC,WAAW,IAAf;AACA,IAAIC,kBAAkB,IAAtB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEA,IAAIC,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBX,oBAAoBY,OAAtC,CAAb;AACA,IAAIC,SAASH,OAAOC,MAAP,CAAc,EAAd,EAAkBX,oBAAoBa,MAAtC,CAAb;;AAEA,IAAIC,WAAW;AACbC,SAAO,EAAEX,IAAF;AADM,CAAf;;AAIA,IAAIY,iBAAiB;AACnBC,OAAK,YADc;AAEnBC,YAAU,MAFS;AAGnBC,WAAU,MAHS;AAInBC,cAAY,cAJO;AAKnBC,QAAM,SALa;AAMnBC,UAAO,CANY;AAOnBC,SAAM,CAPa;AAQnBC,cAAW,CARQ;AASnBC,gBAAa,EATM;AAUnBC,aAAW,IAAIC,IAAJ,EAVQ;AAWnBC,aAAW,IAAID,IAAJ;AACX;;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAdqB,CAArB,CAwDA/B,KAAK,aAAL,EAAoBiC,KAAK;AAAA;;AACvBA,IAAEC,MAAF,uBAAS,qCAAGC,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAyB,2BAAzB;AACD,CAFD;;AAIA","file":"appointment-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst appointmentFixtures = require('./fixtures/appointment')\nlet config = {\n  logging() {}\n}\n\nlet id = 1\nlet ccid = 10\nlet UserStub = null\nlet AppointmentStub = null\nlet db = null\nlet sandbox = null\n\nlet doctor = Object.assign({}, appointmentFixtures.docuser)\nlet single = Object.assign({}, appointmentFixtures.single)\n\nlet ccidArgs = {\n  where: { ccid }\n}\n\nlet newAppointment = {\n  day: '2018-06-28',\n  hourinit: '8:00',\n  hourend:  '9:00',\n  doctorname: 'Pepito PÃ©rez',\n  type: 'General',\n  branch:1,\n  state:1,\n  assignedid:0,\n  assignedname:'',\n  createdAt: new Date(),\n  updatedAt: new Date()\n  // operatorsAliases: false\n}\n/*\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n\n  UserStub = {\n    hasMany: sandbox.spy()\n  }\n\n  AppointmentStub = {\n    belongsTo: sinon.spy()\n  }\n\n  // Model create Stub\n  AppointmentStub.create = sandbox.stub()\n  UserStub.create.withArgs(newAppointment).returns(Promise.resolve({\n    toJSON() { return newAppointment }\n  }))\n\n  // Model update Stub\n  UserStub.update = sandbox.stub()\n  UserStub.update.withArgs(single, ccidArgs).returns(Promise.resolve(single))\n\n  // Model findOne Stub (with ccid)\n  UserStub.findOne = sandbox.stub()\n  UserStub.findOne.withArgs(ccidArgs).returns(Promise.resolve(userFixtures.byCCid(ccid)))\n\n  // Model findById Stub\n  UserStub.findById = sandbox.stub()\n  UserStub.findById.withArgs(id).returns(Promise.resolve(userFixtures.byId(id))) \n\n  const setupDatabase = proxyquire('../', {\n    './models/user': () => UserStub,\n    './models/appointment': () => AppointmentStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n*/\ntest('Appointment', t => {\n  t.truthy(db.Appointment, 'User service should exist')\n})\n\n/*test.serial('Setup', t => {\n  t.true(UserStub.hasMany.called, 'UserModel.hasMany was executed')\n  t.true(UserStub.hasMany.calledWith(AppointmentStub), 'Argument should be the ScheduleUserModel')\n  t.true(AppointmentStub.belongsTo.called, 'SheduleUserModel.belongsTo was executed')\n  t.true(AppointmentStub.belongsTo.calledWith(UserStub), 'Argument should be the UserModel')\n})\n\ntest.serial('User#createOrUpdate - new', async t => {\n  let user = await db.User.createOrUpdate(newUser)\n\n  t.true(UserStub.findOne.called, 'findOne should be called on model')\n  t.true(UserStub.findOne.calledOnce, 'findOne should be called once')\n\n  // Una para el ccid\n  t.true(UserStub.findOne.calledWith({\n  where: { ccid: newUser.ccid }\n  }), 'findOne should be called with ccid args')\n\n  t.true(UserStub.create.called, 'create should be called on model')\n  t.true(UserStub.create.calledOnce, 'create should be called once')\n  t.true(UserStub.create.calledWith(newUser), 'create should be called with specified args')\n\n  t.deepEqual(user, newUser, 'agent should be the same')\n})\n\ntest.serial('User#createOrUpdate - exists', async t => {\n  let user = await db.User.createOrUpdate(single)\n\n  t.true(UserStub.findOne.called, 'findOne should be called on model')\n  t.true(UserStub.findOne.calledTwice, 'findOne should be called twice')\n  // 2 Para el ccid\n  t.true(UserStub.findOne.calledWith(ccidArgs), 'findOne should be called with ccid args')\n\n  t.true(UserStub.update.called, 'agent.update called on model')\n  t.true(UserStub.update.calledOnce, 'agent.update should be called once')\n  t.true(UserStub.update.calledWith(single), 'agent.update should be called with specified args')\n  t.deepEqual(user, single, 'agent should be the same')\n}) */\n\n"]}